{"version":3,"sources":["assets/Pic.js","components/hooks/usePlanning.js","components/helpers/PlanningHelper.js","components/UI/OnCallTimeContainer.js","components/UI/AvailabilitiesContainer.js","components/UI/PlanningContainer.js","components/hooks/useRulesForm.js","components/helpers/FormHelper.js","components/UI/RulesForm.js","components/hooks/useModalForm.js","components/UI/RulesTable.js","components/UI/RulesContainer.js","App.js","index.js"],"names":["rulesBySlot","rulesByPerson","onCallTimes","key","text","value","slots","usePlanning","useState","people","planning","callback","error","message","onCallTimeCount","length","slotCount","personCount","data","setData","colors","addSlot","forEach","addPerson","slot","removeSlot","slotId","filter","e","person","item","removePerson","personId","getOnCallTimeValue","onCallTime","find","getCsvData","csvData","push","csvRow","getIdsToSend","array","arrayTmp","generatePlanning","a","reqData","JSON","stringify","config","method","url","headers","axios","then","response","parse","console","log","catch","OnCallTimeContainer","map","Label","color","horizontal","style","marginTop","Icon","name","cursor","onClick","onCallTimeId","removeOnCallTime","initialValue","save","newOnCallTime","updateOnCallTimes","count","addOnCallTimes","AvailabilitiesContainer","Table","celled","padded","Header","Row","textAlign","HeaderCell","singleLine","width","newSlot","updateSlots","Cell","Button","circular","icon","Body","newPerson","updatePeople","selectable","positive","negative","handleChangeOnAvailabilities","PlanningContainer","Group","Dropdown","clearable","className","placeholder","fluid","options","onChange","i","datas","handleChangeOnPlanning","selection","filename","resetPlanning","useRulesForm","ruleName","ruleId","existingRule","param","counter","on_call_times","exigency","disable","rule","setRule","filteredPeopleChoice","concat","includes","filteredSlotsChoice","onCallTimesChoice","String","peopleChoice","slotsChoice","formData","setFormData","handleCloseOnModal","modalSettings","setModalSettings","isOpen","RulesForm","onCallTimesChosen","peopleChosen","slotsChosen","Container","Grid","columns","Column","newMethod","handleChangeOnMethod","Input","min","newValue","parseInt","handleChangeOnParam","type","id","removeOnCallTimeInRule","sort","addOnCallTimeInRule","removeSlotInRule","addSlotInRule","removePersonInRule","addPersonInRule","Divider","rules","submitForm","useModalForm","RulesTable","columnsName","Modal","open","onClose","Content","index","removeRule","handleEditRule","itm","split","isEmpty","reduce","s","Checkbox","toggle","checked","handleOpenOnModal","RulesContainer","containers","title","content","panels","_","times","Accordion","exclusive","App","basic","size","paddingLeft","paddingTop","overflow","minHeight","Message","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61375ba2.chunk.js","sourcesContent":["export const rulesBySlot = [\n    {\n        \"method\": \"exact\",\n        \"param\": 2,\n        \"counter\": -1,\n        \"slots\": [-1],\n        \"people\": [-1],\n        \"on_call_times\": [\"0\", \"1\"],\n        \"exigency\": 0,\n        \"disable\": false\n    },\n    {\n        \"method\": \"at_most\",\n        \"param\": 1,\n        \"counter\": -1,\n        \"slots\": [0, 1, 2, 3, 4, 5, 6, 7],\n        \"people\": [-1],\n        \"exigency\": 0,\n        \"on_call_times\": [\"3\"],\n        \"disable\": true\n    },\n    {\n        \"method\": \"at_least\",\n        \"param\": 3,\n        \"counter\": -1,\n        \"slots\": [0, 1, 2, 3, 4, 5, 6, 7],\n        \"people\": [-1],\n        \"exigency\": 0,\n        \"on_call_times\": [\"2\"],\n        \"disable\": true\n    },\n    {\n        \"method\": \"at_most\",\n        \"param\": 6,\n        \"counter\": -1,\n        \"slots\": [0, 1, 2, 3, 4, 5, 6, 7],\n        \"people\": [-1],\n        \"exigency\": 0,\n        \"on_call_times\": [\"2\"],\n        \"disable\": true\n    },\n    {\n        \"method\": \"exact\",\n        \"param\": 0,\n        \"counter\": -1,\n        \"slots\": [0, 1, 2, 3, 4, 5, 6, 7],\n        \"people\": [-1],\n        \"exigency\": 0,\n        \"on_call_times\": [\"4\", \"5\"],\n        \"disable\": true\n    },\n    {\n        \"method\": \"exact\",\n        \"param\": 0,\n        \"counter\": -1,\n        \"slots\": [8, 9],\n        \"people\": [-1],\n        \"exigency\": 0,\n        \"on_call_times\": [\"2\", \"6\", \"3\"],\n        \"disable\": true\n    },\n    {\n        \"method\": \"at_most\",\n        \"param\": 3,\n        \"counter\": -1,\n        \"slots\": [8, 9],\n        \"people\": [-1],\n        \"exigency\": 0,\n        \"on_call_times\": [\"5\"],\n        \"disable\": true\n    },\n]\n\nexport const rulesByPerson = [\n    {\n        \"method\": \"at_most\",\n        \"param\": 2,\n        \"counter\": -1,\n        \"slots\": [-1],\n        \"people\": [-1],\n        \"on_call_times\": [\"0\", \"1\"],\n        \"exigency\": 0,\n        \"disable\":  true\n    },\n    {\n        \"method\": \"at_most\",\n        \"param\": 3,\n        \"counter\": -1,\n        \"slots\": [-1],\n        \"people\": [-1],\n        \"on_call_times\": [\"0+1\"],\n        \"exigency\": 0,\n        \"disable\":  true\n    },\n    {\n        \"method\": \"at_most\",\n        \"param\": 1,\n        \"counter\": 2,\n        \"slots\": [-1],\n        \"people\": [-1],\n        \"on_call_times\": [\"0+1\", \"6\"],\n        \"exigency\": 0,\n        \"disable\":  true\n    },\n    {\n        \"method\": \"at_most\",\n        \"param\": 2,\n        \"counter\": 3,\n        \"slots\": [-1],\n        \"people\": [-1],\n        \"on_call_times\": [\"2\"],\n        \"exigency\": 0,\n        \"disable\":  true\n    }\n]\n\nexport const onCallTimes = [\n    {\n        key: 0,\n        text: \"Sécu pente\",\n        value: 0\n    },\n    {\n        key: 1,\n        text: \"Sécu escalier\",\n        value: 1\n    },\n    {\n        key: 2,\n        text: \"Bar\",\n        value: 2\n    },\n    {\n        key: 3,\n        text: \"Caisse\",\n        value: 3\n    },\n    {\n        key: 4,\n        text: \"Ménage\",\n        value: 4\n    },\n    {\n        key: 5,\n        text: \"Sécu trottoir\",\n        value: 5\n    },\n    {\n        key: 6,\n        text: \"Pause\",\n        value: 6\n    }\n]\n\nexport const slots = [\n    {\n        key: 0,\n        text: \"18h00\"\n    },\n    {\n        key: 1,\n        text: \"18h30\"\n    },\n    {\n        key: 2,\n        text: \"19h00\"\n    },\n    {\n        key: 3,\n        text: \"19h30\"\n    },\n    {\n        key: 4,\n        text: \"20h00\"\n    },\n    {\n        key: 5,\n        text: \"20h30\"\n    },\n    {\n        key: 6,\n        text: \"21h00\"\n    },\n    {\n        key: 7,\n        text: \"21h30\"\n    },\n    {\n        key: 8,\n        text: \"22h00\"\n    },\n    {\n        key: 9,\n        text: \"22h30\"\n    },\n]","import { useState } from 'react'\nimport {onCallTimes, rulesByPerson, rulesBySlot, slots} from \"../../assets/Pic\";\n\nconst usePlanning = () => {\n    const colors = ['red', 'orange', 'yellow', 'olive', 'green', 'teal', 'blue', 'violet', 'purple', 'pink', 'brown']\n\n    const [data, setData] = useState({\n        slots: slots,\n        people: [],\n        onCallTimes: onCallTimes,\n        rulesByPerson: rulesByPerson,\n        rulesBySlot: rulesBySlot,\n        planning: {},\n        callback: {\n            error: false,\n            message: ''\n        },\n        onCallTimeCount: onCallTimes.length,\n        slotCount: slots.length,\n        personCount: 0\n    })\n\n    return {\n        data,\n        setData,\n        colors\n    }\n}\n\nexport default usePlanning","import axios from \"axios\";\n\nexport const addSlot = (data, setData) => {\n    data.slots = [...data.slots, {key: data.slotCount, text: '00h00'}]\n    data.people.forEach(({ key }) =>\n        data.planning[key][data.slotCount] = null\n    )\n    data.slotCount += 1\n    setData({...data})\n}\n\nexport const addPerson = (data, setData) => {\n    data.people = [...data.people, {key: data.personCount, text: 'Personne'}]\n    data.planning[data.personCount] = {}\n    data.slots.forEach(slot => {\n        data.planning[data.personCount][slot.key] = null\n    })\n    data.personCount += 1\n    setData({...data})\n}\n\nexport const addOnCallTimes = (data, setData) => {\n    data.onCallTimes = [...data.onCallTimes, {key: data.onCallTimeCount, text: 'Perm', value: data.count}]\n    data.onCallTimeCount += 1\n    setData({...data})\n}\n\nexport const removeSlot = (data, setData, slotId) => {\n    data.slots = data.slots.filter(e  => e.key !== slotId)\n    data.people.forEach(person =>\n        delete data.planning[person.key][slotId]\n    )\n    data.rulesBySlot.forEach(item =>\n        item.slots = item.slots.filter(e => e !== slotId)\n    )\n    data.rulesByPerson.forEach(item =>\n        item.people = item.people.filter(e => e !== slotId)\n    )\n    setData({...data})\n}\n\nexport const removePerson = (data, setData, personId) => {\n    data.people = data.people.filter(e => e.key !== personId)\n    delete data.planning[personId]\n    data.rulesBySlot.forEach(item =>\n        item.slots = item.slots.filter(e => e !== personId)\n    )\n    data.rulesByPerson.forEach(item =>\n        item.people = item.people.filter(e => e !== personId)\n    )\n    setData({...data})\n}\n\nexport const removeOnCallTime = (data, setData, onCallTimeId) => {\n    data.onCallTimes = data.onCallTimes.filter(e => e.key !== onCallTimeId)\n    data.people.forEach(person  => {\n        data.slots.forEach(slot  => {\n            if (slot.key in data.planning[person.key] && data.planning[person.key][slot.key] === onCallTimeId){\n                data.planning[person.key][slot.key] = null\n            }\n        })\n    })\n    setData({...data})\n}\n\nexport const removeRule = (rule, data, setData, index) => {\n    if (rule === 'slot'){\n        data.rulesBySlot = data.rulesBySlot.filter((e, i) => i !== index)\n    } else if  (rule === 'person'){\n        data.rulesByPerson = data.rulesByPerson.filter((e, i) => i !== index)\n    }\n    setData({ ...data })\n}\n\nexport const updateSlots = (data, setData, newSlot, slotId) => {\n    data.slots.find(e => e.key === slotId).text = newSlot\n    setData({...data})\n}\n\nexport const updatePeople = (data, setData, newPerson, personId) => {\n    data.people.find(e => e.key === personId).text = newPerson\n    setData({...data})\n}\n\nexport const updateOnCallTimes = (data, setData, newOnCallTime, onCallTimeId) => {\n    data.onCallTimes.find(e => e.key === onCallTimeId).text = newOnCallTime\n    setData({...data})\n}\n\nexport const handleChangeOnAvailabilities = (data, setData, personId, slotId) => {\n    if (slotId in data.planning[personId]){\n        delete data.planning[personId][slotId]\n    } else {\n        data.planning[personId][slotId] = null\n    }\n    setData({...data})\n}\n\nexport const handleChangeOnPlanning = (data, setData, value, personId, slotId) => {\n    data.planning[personId][slotId] = value !== '' ? data.onCallTimes.find(e => e.value === value).key : null\n    setData({...data})\n}\n\nexport const getOnCallTimeValue = (data,  personId, slotId) => {\n    let key = null\n    if (slotId in data.planning[personId]){\n        key = data.planning[personId][slotId]\n    }\n    if (key !== null) {\n        const onCallTime = data.onCallTimes.find(e => e.key === key)\n        if (onCallTime) {\n            return onCallTime.value\n        }\n    }\n    return null\n}\n\nexport const getCsvData = (data) => {\n    const csvData = [['Personnes']]\n    data.slots.forEach(slot => {\n        csvData[0].push(slot.text)\n    })\n    data.people.forEach(person => {\n        const csvRow = [data.people.find(e => e.key === person.key).text]\n        data.slots.forEach(slot => {\n            let key = null\n            if (slot.key in data.planning[person.key]){\n                key = data.planning[person.key][slot.key]\n            }\n            csvRow.push(key !== null ? data.onCallTimes.find(e => e.key === key).text : null)\n        })\n        csvData.push(csvRow)\n    })\n    return csvData\n}\n\nexport const resetPlanning = (data, setData) => {\n    data.people.forEach(person => {\n        data.slots.forEach(slot => {\n            if (slot.key in data.planning[person.key]){\n                data.planning[person.key][slot.key] = null\n            }\n        })\n    })\n    setData({...data})\n}\n\nconst getIdsToSend = (array) => {\n    const arrayTmp = []\n    array.forEach(e => arrayTmp.push(e.key))\n    return arrayTmp\n}\n\nexport const generatePlanning = async (data, setData) => {\n    const reqData = JSON.stringify({\n        \"planning\": data.planning,\n        \"on_call_times\": getIdsToSend(data.onCallTimes),\n        \"slots\": getIdsToSend(data.slots),\n        \"people\": getIdsToSend(data.people),\n        \"rules_by_person\": data.rulesByPerson,\n        \"rules_by_slot\": data.rulesBySlot\n    })\n    const config = {\n        method: 'POST',\n        url: 'https://resplanning-back.herokuapp.com/generate/',\n        // url: 'http://localhost:8000/generate/',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        data : reqData\n    }\n    axios(config)\n        .then(function (response) {\n            data.planning = JSON.parse(JSON.stringify(response.data.planning))\n            setData({...data})\n            console.log(data.planning)\n        })\n        .catch(function (error) {\n            data.callback.error = true\n            data.callback.message = error\n            setData({...data})\n        });\n}","import usePlanning from '../hooks/usePlanning'\nimport { Icon, Label } from 'semantic-ui-react'\nimport EditableLabel from 'react-editable-label'\nimport {addOnCallTimes, removeOnCallTime, updateOnCallTimes} from '../helpers/PlanningHelper';\n\nconst OnCallTimeContainer = ({ data, setData }) => {\n    const {\n        colors\n    } = usePlanning()\n\n    return (\n        <>\n            {\n                data.onCallTimes.map(\n                    onCallTime =>\n                        <Label key={onCallTime.key} color={colors[onCallTime.key]} horizontal style={{ marginTop: '1vh'}}>\n                            <Icon\n                                name='remove'\n                                style={{ cursor: 'pointer' }}\n                                onClick={() => removeOnCallTime(data, setData, onCallTime.key)}\n                            />\n                            <EditableLabel\n                                initialValue={onCallTime.text}\n                                save={value => updateOnCallTimes(data, setData, value, onCallTime.key)}\n                            />\n                        </Label>\n                )\n            }\n            <Icon\n                color='green'\n                name='add'\n                style={{ cursor: 'pointer' }}\n                onClick={() => addOnCallTimes(data, setData)}\n            />\n        </>\n    )\n}\n\nexport default OnCallTimeContainer","import { Button, Icon, Table } from 'semantic-ui-react'\nimport EditableLabel from 'react-editable-label'\nimport {\n    addPerson,\n    addSlot, generatePlanning,\n    handleChangeOnAvailabilities,\n    removePerson, removeSlot,\n    updatePeople,\n    updateSlots\n} from \"../helpers/PlanningHelper\";\n\nconst AvailabilitiesContainer = ({ data, setData }) => {\n    return (\n        <>\n            <Table celled padded color='green'>\n                <Table.Header>\n                    <Table.Row textAlign='center'>\n                        <Table.HeaderCell singleLine width={4}>\n                            Personnes\n                        </Table.HeaderCell>\n                        {\n                            data.slots.map(slot =>\n                                <Table.HeaderCell singleLine key={slot.key}>\n                                    <Icon\n                                        color='red'\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removeSlot(data, setData, slot.key)}\n                                    />\n                                    <EditableLabel\n                                        initialValue={slot.text}\n                                        save={value => updateSlots(data, setData, value, slot.key)}\n                                    />\n                                </Table.HeaderCell>\n                            )\n                        }\n                        <Table.Cell>\n                            <Button\n                                circular\n                                color='green'\n                                icon='add'\n                                onClick={() => addSlot(data, setData)}\n                            />\n                        </Table.Cell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                    {\n                        data.people.map(person =>\n                            <Table.Row key={person.key}>\n                                <Table.Cell singleLine textAlign='center'>\n                                    <Icon\n                                        color='red'\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removePerson(data, setData, person.key)}\n                                    />\n                                    <EditableLabel\n                                        initialValue={person.text}\n                                        save={value => updatePeople(data, setData, value, person.key)}\n                                    />\n                                </Table.Cell>\n                                {\n                                    data.slots.map(slot =>\n                                        <Table.Cell\n                                            selectable\n                                            positive={slot.key in data.planning[person.key]}\n                                            negative={!(slot.key in data.planning[person.key])}\n                                            onClick={() => {\n                                                handleChangeOnAvailabilities(data, setData, person.key, slot.key)\n                                            }}\n                                            key={person+slot+person.key+slot.key}\n                                        />\n                                    )\n                                }\n                            </Table.Row>\n                        )\n                    }\n                </Table.Body>\n            </Table>\n            <Button\n                circular\n                color='green'\n                icon='add'\n                onClick={() => {\n                    addPerson(data, setData)\n                }}\n            />\n            <Button onClick={() => generatePlanning({...data}, setData)}>Générer</Button>\n        </>\n    )\n}\n\nexport default AvailabilitiesContainer","import { Button, Dropdown, Icon, Table } from 'semantic-ui-react'\nimport {\n    addPerson,\n    addSlot, getCsvData,\n    getOnCallTimeValue,\n    handleChangeOnPlanning,\n    removePerson,\n    removeSlot, resetPlanning\n} from '../helpers/PlanningHelper'\nimport { CSVLink } from 'react-csv'\nimport usePlanning from \"../hooks/usePlanning\";\n\nconst PlanningContainer = ({ data, setData }) => {\n    const {\n        colors\n    } = usePlanning()\n\n    return (\n        <>\n            <Table celled padded color='green'>\n                <Table.Header>\n                    <Table.Row textAlign='center'>\n                        <Table.HeaderCell singleLine width={4}>\n                            Personnes\n                        </Table.HeaderCell>\n                        {\n                            data.slots.map(slot =>\n                                <Table.HeaderCell singleLine key={slot.key}>\n                                    <Icon\n                                        color='red'\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removeSlot(data, setData, slot.key)}\n                                    />\n                                    {slot.text}\n                                </Table.HeaderCell>\n                            )\n                        }\n                        <Table.Cell>\n                            <Button\n                                circular\n                                color='green'\n                                icon='add'\n                                onClick={() => addSlot(data, setData)}\n                            />\n                        </Table.Cell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                    {\n                        data.people.map(person =>\n                            <Table.Row key={person.key}>\n                                <Table.Cell singleLine textAlign='center'>\n                                    <Icon\n                                        color='red'\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removePerson(data, setData, person.key)}\n                                    />\n                                    {person.text}\n                                </Table.Cell>\n                                {\n                                    data.slots.map(slot =>\n                                        <Table.Cell singleLine key={person+slot+person.key+slot.key}>\n                                            {\n                                                slot.key in data.planning[person.key] ?\n                                                    <Button.Group\n                                                        color={\n                                                            getOnCallTimeValue(data, person.key, slot.key) !== null ?\n                                                                colors[getOnCallTimeValue(data, person.key, slot.key)%colors.length] :\n                                                                null\n                                                        }\n                                                    >\n                                                        <Dropdown\n                                                            clearable\n                                                            className='button'\n                                                            placeholder='Perm'\n                                                            fluid\n                                                            value={ getOnCallTimeValue(data, person.key, slot.key) }\n                                                            options={data.onCallTimes}\n                                                            onChange={(i, datas) => {\n                                                                handleChangeOnPlanning(data, setData, datas.value, person.key, slot.key)\n                                                            }}\n                                                            selection\n                                                            style={{ width: '100%' }}\n                                                        />\n                                                    </Button.Group>\n                                                     :\n                                                    null\n                                            }\n                                        </Table.Cell>\n                                    )\n                                }\n                            </Table.Row>\n                        )\n                    }\n                </Table.Body>\n            </Table>\n            <Button\n                circular\n                color='green'\n                icon='add'\n                onClick={() => addPerson(data, setData)}\n            />\n            <CSVLink data={getCsvData(data)} filename={\"planning.csv\"}><Button>Exporter en CSV</Button></CSVLink>\n            <Button color='red' onClick={() => resetPlanning(data, setData)}>RAZ</Button>\n        </>\n    )\n}\n\nexport default PlanningContainer","import { useState } from 'react'\n\nconst useRulesForm = (data, ruleName, ruleId) => {\n    const {\n        onCallTimes,\n        people,\n        slots,\n        rulesBySlot,\n        rulesByPerson\n    } = data\n\n    const existingRule = ruleName === 'slot' ?\n        rulesBySlot[ruleId] :\n        rulesByPerson[ruleId]\n\n    const [rule, setRule] = useState(existingRule ? {...existingRule} : {\n        method: \"exact\",\n        param: 0,\n        counter: -1,\n        slots: [],\n        people: [],\n        on_call_times: [],\n        exigency: 0,\n        disable: false\n    })\n\n    const filteredPeopleChoice = rule.people[0] !== -1 ?\n        [{key: -1, text: 'Tout le monde', value: -1}].concat(people.filter(({ key }) => !rule.people.includes(key))) :\n        []\n\n    const filteredSlotsChoice = rule.slots[0] !== -1 ?\n        [{key: -1, text: 'Tous les créneaux', value: -1}].concat(slots.filter(({ key }) => !rule.slots.includes(key))) :\n        []\n\n    const [formData, setFormData] = useState({\n        onCallTimesChoice: onCallTimes.filter(({ key }) => !rule.on_call_times.includes(String(key))),\n        peopleChoice: filteredPeopleChoice,\n        slotsChoice: filteredSlotsChoice,\n    })\n\n    return {\n        rule,\n        setRule,\n        formData,\n        setFormData\n    }\n}\n\nexport default useRulesForm","export const handleChangeOnMethod = (rule, setRule, newMethod) => {\n    rule.method = newMethod ? newMethod : 'exact'\n    setRule({...rule})\n}\n\nexport const handleChangeOnParam = (rule, setRule, newValue) => {\n    rule.param = parseInt(newValue)\n    setRule({...rule})\n}\n\nexport const addOnCallTimeInRule = (rule, setRule, formData, setFormData, onCallTimeId) => {\n    rule.on_call_times = [...rule.on_call_times, String(onCallTimeId)].sort()\n    formData.onCallTimesChoice = formData.onCallTimesChoice.filter(({ key }) => key !== onCallTimeId)\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const addSlotInRule = (rule, setRule, formData, setFormData, slotId) => {\n    rule.slots = slotId === -1 ? [slotId] : [...rule.slots, slotId].sort()\n    formData.slotsChoice = slotId === -1 ? [] : formData.slotsChoice.filter(({ key }) => key !== slotId)\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const addPersonInRule = (rule, setRule, formData, setFormData, personId) => {\n    rule.people = personId === -1 ? [personId] : [...rule.people, personId].sort()\n    formData.peopleChoice = personId === -1 ? [] : formData.peopleChoice.filter(({ key }) => key !== personId)\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const removeOnCallTimeInRule = (rule, setRule, formData, setFormData, data, onCallTimeId) => {\n    rule.on_call_times = rule.on_call_times.filter(id => id !== onCallTimeId)\n    formData.onCallTimesChoice = data.onCallTimes.filter(({ key }) => !rule.on_call_times.includes(String(key)))\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const removeSlotInRule = (rule, setRule, formData, setFormData, data, slotId) => {\n    rule.slots = rule.slots.filter(id => id !== slotId)\n    formData.slotsChoice = [{key: -1, text: 'Tous les créneaux', value: -1}].concat(\n        data.slots.filter(({ key }) => !rule.slots.includes(key))\n    )\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const removePersonInRule = (rule, setRule, formData, setFormData, data, personId) => {\n    rule.people = rule.people.filter(id => id !== personId)\n    formData.peopleChoice = [{key: -1, text: 'Tout le monde', value: -1}].concat(\n        data.people.filter(({ key }) => !formData.rule.people.includes(key))\n    )\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const handleCloseOnModal = (modalSettings, setModalSettings) => {\n    modalSettings.isOpen = false\n    setModalSettings({...modalSettings})\n}\n\nexport const handleOpenOnModal = (modalSettings, setModalSettings) => {\n    modalSettings.isOpen = true\n    modalSettings.ruleId = null\n    setModalSettings({...modalSettings})\n}\n\nexport const handleEditRule = (modalSettings, setModalSettings, id) => {\n    modalSettings.isOpen = true\n    modalSettings.ruleId = id\n    setModalSettings({...modalSettings})\n}\n\nexport const submitForm = (modalSettings, setModalSettings, rule, ruleName, ruleId, data, setData) => {\n    const {\n        rulesBySlot,\n        rulesByPerson\n    } = data\n\n    const rules = ruleName === 'slot' ?\n        rulesBySlot :\n        rulesByPerson\n\n    if ( rules[ruleId] ) {\n        rules[ruleId] = rule\n    } else {\n        rules.push(rule)\n    }\n\n    setData({...data})\n    modalSettings.isOpen = false\n    setModalSettings({...modalSettings})\n}","import {Button, Container, Divider, Dropdown, Grid, Icon, Input, Label} from 'semantic-ui-react'\nimport usePlanning from '../hooks/usePlanning'\nimport useRulesForm from '../hooks/useRulesForm'\nimport {\n    addOnCallTimeInRule,\n    addPersonInRule,\n    addSlotInRule, handleChangeOnMethod, handleChangeOnParam, handleCloseOnModal,\n    removeOnCallTimeInRule, removePersonInRule,\n    removeSlotInRule, submitForm\n} from \"../helpers/FormHelper\";\n\nconst RulesForm = ({ modalSettings, setModalSettings, ruleName, ruleId, data, setData }) => {\n    const {\n        rule,\n        setRule,\n        formData,\n        setFormData\n    } = useRulesForm(data, ruleName, ruleId)\n\n    const {\n        onCallTimes,\n        people,\n        slots\n    } = data\n\n    const {\n        onCallTimesChoice,\n        peopleChoice,\n        slotsChoice,\n    } = formData\n\n    const {\n        on_call_times: onCallTimesChosen,\n        people: peopleChosen,\n        slots: slotsChosen\n    } = rule\n\n    const {\n        colors\n    } = usePlanning()\n\n    const methodOptions = [\n        { key: 'exact', value: 'exact', text: 'Exactement'},\n        { key: 'at_least', value: 'at_least', text: 'Au moins'},\n        { key: 'at_most', value: 'at_most', text: 'Au plus'},\n    ]\n\n    return(\n        <Container>\n            <Grid>\n                <Grid.Row columns={4}>\n                    <Grid.Column>\n                        <h3>Méthode :</h3>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Dropdown\n                            clearable={rule.method !== 'exact'}\n                            value={rule.method}\n                            selection\n                            onChange={(i, datas) => handleChangeOnMethod(rule, setRule, datas.value)}\n                            options={methodOptions}\n                        />\n                    </Grid.Column>\n                    <Grid.Column>\n                        <h3>Paramètre :</h3>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Input\n                            value={rule.param}\n                            min={0}\n                            onChange={(i, datas) => handleChangeOnParam(rule, setRule, datas.value)}\n                            type='number'\n                        />\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row columns={2}>\n                    <Grid.Column>\n                        <h3>Permanences :</h3>\n                    </Grid.Column>\n                    <Grid.Column>\n                        {\n                            onCallTimesChosen.map(onCallTimeId =>\n                                <Label\n                                    key={onCallTimeId}\n                                    color={colors[onCallTimeId%colors.length]}\n                                    style={{ marginTop: '0.5vh'}}\n                                >\n                                    <Icon\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removeOnCallTimeInRule(rule, setRule, formData, setFormData, data, onCallTimeId)}\n                                    />\n                                    {onCallTimes.find(({ key }) => key === parseInt(onCallTimeId)).text}\n                                </Label>\n                            )\n                        }\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    {\n                        onCallTimesChoice.map(({ key, text }) =>\n                            <Label\n                                horizontal\n                                key={key}\n                                color={colors[key%colors.length]}\n                                style={{ cursor: 'pointer', marginTop: '0.5vh' }}\n                                onClick={() => addOnCallTimeInRule(rule, setRule, formData, setFormData, key)}\n                            >\n                                {text}\n                            </Label>\n                        )\n                    }\n                </Grid.Row>\n                <Grid.Row columns={2}>\n                    <Grid.Column>\n                        <h3>Créneaux :</h3>\n                    </Grid.Column>\n                    <Grid.Column>\n                        {\n                            slotsChosen.map(slot =>\n                                <Label\n                                    horizontal\n                                    key={slot}\n                                    color={slot === -1 ? 'purple' : colors[slot%colors.length]}\n                                    style={{ marginTop: '0.5vh'}}\n                                >\n                                    <Icon\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removeSlotInRule(rule, setRule, formData, setFormData, data, slot)}\n                                    />\n                                    {slot === -1 ? 'Tous les créneaux' : slots.find(({ key }) => key === slot).text}\n                                </Label>\n                            )\n                        }\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    {\n                        slotsChoice.map(({ key, text }) =>\n                            <Label\n                                key={key}\n                                color={key === -1 ? 'purple' : colors[key%colors.length]}\n                                style={{ cursor: 'pointer', marginTop: '0.5vh' }}\n                                onClick={() => addSlotInRule(rule, setRule, formData, setFormData, key)}\n                            >\n                                {text}\n                            </Label>\n                        )\n                    }\n                </Grid.Row>\n                <Grid.Row columns={2}>\n                    <Grid.Column>\n                        <h3>Personnes :</h3>\n                    </Grid.Column>\n                    <Grid.Column>\n                        {\n                            peopleChosen.map(person =>\n                                <Label\n                                    horizontal\n                                    key={person}\n                                    color={person === -1 ? 'teal' : colors[person%colors.length]}\n                                    style={{ marginTop: '0.5vh'}}\n                                >\n                                    <Icon\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removePersonInRule(rule, setRule, formData, setFormData, data, person)}\n                                    />\n                                    {person === -1 ? 'Tout le monde' : people.find(({ key }) => key === person).text}\n                                </Label>\n                            )\n                        }\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    {\n                        peopleChoice.map(({ key, text }) =>\n                            <Label\n                                key={key}\n                                color={key === -1 ? 'teal' : colors[key%colors.length]}\n                                style={{ cursor: 'pointer', marginTop: '0.5vh' }}\n                                onClick={() => addPersonInRule(rule, setRule, formData, setFormData, key)}\n                            >\n                                {text}\n                            </Label>\n                        )\n                    }\n                </Grid.Row>\n            </Grid>\n            <Divider />\n            <Button negative onClick={() => handleCloseOnModal(modalSettings, setModalSettings)}>Annuler</Button>\n            <Button positive onClick={() => submitForm(modalSettings, setModalSettings, rule, ruleName, ruleId, data, setData)}>Sauvegarder</Button>\n        </Container>\n    )\n}\n\nexport default RulesForm","import {useState} from 'react'\n\nconst useModalForm = () => {\n    const [modalSettings, setModalSettings] = useState({\n        isOpen: false,\n        ruleId: null\n    })\n\n    return {\n        modalSettings,\n        setModalSettings\n    }\n}\n\nexport default useModalForm","import {Button, Checkbox, Icon, Label, Modal, Table} from 'semantic-ui-react'\nimport usePlanning from '../hooks/usePlanning'\nimport { removeRule } from '../helpers/PlanningHelper'\nimport {isEmpty} from 'lodash'\nimport RulesForm from './RulesForm'\nimport {handleCloseOnModal, handleEditRule, handleOpenOnModal} from \"../helpers/FormHelper\";\nimport useModalForm from \"../hooks/useModalForm\";\n\nconst RulesTable = ({ name, data, setData }) => {\n    const {\n        colors\n    } = usePlanning()\n\n    const rules = name === 'slot' ? data.rulesBySlot : data.rulesByPerson\n\n    const {\n        modalSettings,\n        setModalSettings\n    } = useModalForm()\n\n    const columnsName = name === 'person' ?\n        ['', '', 'Méthode', 'Paramètre', 'Permanences', 'Créneaux', 'Personnes', 'Lot', 'Exigence', 'Actif'] :\n        ['', '', 'Méthode', 'Paramètre', 'Permanences', 'Créneaux', 'Personnes', 'Exigence', 'Actif']\n\n    return (\n        <>\n            <Modal\n                open={modalSettings.isOpen}\n                onClose={() => handleCloseOnModal(modalSettings, setModalSettings)}\n            >\n                <Modal.Header>Règle par {name === 'slot' ? 'créneau' : 'personne'}</Modal.Header>\n                <Modal.Content>\n                    <RulesForm\n                        modalSettings={modalSettings}\n                        setModalSettings={setModalSettings}\n                        ruleId={modalSettings.ruleId}\n                        ruleName={name}\n                        data={data}\n                        setData={setData}\n                    />\n                </Modal.Content>\n            </Modal>\n            <Table celled padded color='blue'>\n                <Table.Header>\n                    <Table.Row>\n                        {\n                            columnsName.map((item, index) =>\n                                <Table.HeaderCell key={index}>\n                                    {item}\n                                </Table.HeaderCell>\n                            )\n                        }\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {\n                        rules.map((item, index) =>\n                            <Table.Row key={item+index}>\n                                <Table.Cell style={{ textAlign: 'center' }}>\n                                    <Icon\n                                        color='red'\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removeRule(name, data, setData, index)}\n                                    />\n                                </Table.Cell>\n                                <Table.Cell style={{ textAlign: 'center' }}>\n                                    <Icon\n                                        color='blue'\n                                        name='edit'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => handleEditRule(modalSettings, setModalSettings, index)}\n                                    />\n                                </Table.Cell>\n                                <Table.Cell>\n                                    {item.method === 'at_least'  && 'Au moins'}\n                                    {item.method === 'at_most'  && 'Au plus'}\n                                    {item.method === 'exact'  && 'Exactement'}\n                                </Table.Cell>\n                                <Table.Cell style={{ textAlign: 'center' }}>\n                                    {item.param}\n                                </Table.Cell>\n                                <Table.Cell>\n                                    {item.on_call_times.map(itm => {\n                                        const onCallTimes = data.onCallTimes.filter(e => itm.split('+').map(i => (parseInt(i))).includes(e.key))\n                                        if (!isEmpty(onCallTimes)){\n                                            return (\n                                                <Label\n                                                    key={itm}\n                                                    color={colors[onCallTimes.length > 1 ? onCallTimes.reduce((s, a) => s + a.key, 0)*10%colors.length : onCallTimes[0].key%colors.length]}\n                                                    horizontal\n                                                    style={{ marginTop: '1vh'}}\n                                                >\n                                                    {onCallTimes[0].text}\n                                                    {onCallTimes.filter(i => i.key !== onCallTimes[0].key).map(i => ' + ' + i.text)}\n                                                </Label>\n                                            )\n                                        }\n                                        return null\n                                    })}\n                                </Table.Cell>\n                                <Table.Cell>\n                                    {item.slots.map(slot => {\n                                        return(\n                                            <Label\n                                                key={slot}\n                                                color={slot === -1 ? 'purple' : colors[slot%colors.length]}\n                                                style={{ marginTop: '1vh'}}\n                                            >\n                                                {slot === -1 ? 'Tous les créneaux' : data.slots.find(e => e.key === slot).text}\n                                            </Label>\n                                        )\n                                    })}\n                                </Table.Cell>\n                                <Table.Cell>\n                                    {item.people.map(person => {\n                                        return(\n                                            <Label\n                                                key={person}\n                                                color={person === -1 ? 'teal' : colors[person%colors.length]}\n                                                style={{ marginTop: '1vh'}}\n                                            >\n                                                {person === -1 ? 'Tout le monde' : data.people.find(e => e.key === person).text}\n                                            </Label>\n                                        )\n                                    })}\n                                </Table.Cell>\n                                {\n                                    name === 'person' && (\n                                        <Table.Cell style={{ textAlign: 'center' }}>\n                                            {\n                                                (item.counter === -1 && !isEmpty(item.people) && item.people[0] === -1 && 'Tous') ||\n                                                (item.counter === -1 && !isEmpty(item.people) && item.people[0] !== -1 && item.people.length) ||\n                                                (item.counter === -1 && isEmpty(item.people) && 0) ||\n                                                (item.counter !== -1 && item.counter)\n                                            }\n                                        </Table.Cell>\n                                    )\n                                }\n                                <Table.Cell style={{ textAlign: 'center' }}>\n                                    <Label circular color={'red'}>\n                                        {item.exigency}\n                                    </Label>\n                                </Table.Cell>\n                                <Table.Cell style={{ textAlign: 'center' }}>\n                                    <Checkbox toggle checked={!item.disable} onChange={() => {\n                                        item.disable = !item.disable\n                                        setData({ ...data })\n                                    }} />\n                                </Table.Cell>\n                            </Table.Row>\n                        )\n                    }\n                </Table.Body>\n            </Table>\n            <Button positive onClick={() => handleOpenOnModal(modalSettings, setModalSettings)}>Ajouter</Button>\n        </>\n    )\n}\n\nexport default RulesTable","import { Accordion, Container, Label } from 'semantic-ui-react'\nimport RulesTable from './RulesTable'\nimport _ from \"lodash\";\n\nconst RulesContainer = ({ data, setData }) => {\n    const containers = [\n        {title: 'Règles par créneau', content: <RulesTable name='slot' data={data} setData={setData} />},\n        {title: 'Règles par personne', content: <RulesTable name='person' data={data} setData={setData} />}\n    ]\n    const panels = _.times(containers.length, (i) => ({\n        key: `panel-${i}`,\n        title: {\n            content: <Label color='black' content={containers[i].title} />\n        },\n        content: {\n            content: containers[i].content\n        }\n    }))\n    return (\n        <Container>\n            <Accordion exclusive={false} panels={panels} />\n        </Container>\n    )\n}\n\nexport default RulesContainer","import {Accordion, Container, Label, Message, Modal} from 'semantic-ui-react'\nimport _ from 'lodash'\nimport OnCallTimeContainer from './components/UI/OnCallTimeContainer'\nimport AvailabilitiesContainer from './components/UI/AvailabilitiesContainer'\nimport PlanningContainer from './components/UI/PlanningContainer'\nimport usePlanning from './components/hooks/usePlanning'\nimport RulesContainer from './components/UI/RulesContainer'\n\nfunction App() {\n    const {\n        data,\n        setData\n    } = usePlanning()\n\n    const containers = [\n        {title: 'Permanences', content: <OnCallTimeContainer data={data} setData={setData} />},\n        {title: 'Règles', content: <RulesContainer data={data} setData={setData} />},\n        {title: 'Disponibilités', content: <AvailabilitiesContainer data={data} setData={setData} />},\n        {title: 'Planning', content: <PlanningContainer data={data} setData={setData} />},\n    ]\n\n    const panels = _.times(containers.length, (i) => ({\n        key: `panel-${i}`,\n        title: {\n            content: <Label basic color='black' size='massive' content={containers[i].title} />\n        },\n        content: {\n            content: containers[i].content\n        }\n    }))\n\n    console.log(data.callback.message)\n\n    return (\n        <Container fluid style={{ paddingLeft: '3vw', paddingTop: '1vh', overflow: 'scroll', minHeight: '100vh' }}>\n            <Modal\n                basic\n                open={data.callback.error}\n                onClose={() => {\n                    data.callback.error = false\n                    data.callback.message = ''\n                    setData({...data})\n                }}\n            >\n                <Message negative>\n                    <Message.Header>Nope</Message.Header>\n                </Message>\n            </Modal>\n            <Accordion\n                panels={panels}\n                exclusive={false}\n                fluid\n            />\n        </Container>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}