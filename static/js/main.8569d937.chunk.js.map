{"version":3,"sources":["assets/defaultData.js","components/hooks/usePlanning.js","components/utils/ApiConfig.js","components/helpers/PlanningHelper.js","components/UI/OnCallTimeContainer.js","components/UI/AvailabilitiesContainer.js","components/UI/PlanningContainer.js","components/hooks/useRulesForm.js","components/helpers/FormHelper.js","components/UI/RulesForm.js","components/hooks/useModalForm.js","components/UI/RulesTable.js","components/UI/RulesContainer.js","components/UI/MenuContainer.js","components/UI/Footer.js","App.js","index.js"],"names":["onCallTimes","config","rulesByPerson","rulesBySlot","slots","slotCount","defaultData","people","key","text","planning","0","1","2","3","4","5","6","7","8","9","callback","error","message","status","statusMsg","onCallTimeCount","personCount","loading","confirmResetOpen","confirmResetDefaultOpen","usePlanning","saved","localStorage","getItem","useState","JSON","parse","data","setData","colors","apiConfig","API_URL","addSlot","forEach","setItem","stringify","removeSlot","slotId","filter","e","person","item","removePerson","personId","removeOnCallTime","onCallTimeId","slot","removeAllOnCallTime","getOnCallTimeValue","onCallTime","find","value","getCsvData","csvData","push","csvRow","getIdsToSend","array","arrayTmp","adaptImportRules","rules","rule","length","id","importRules","file","setFile","setIsRuleOpen","a","response","Promise","resolve","reader","FileReader","onload","result","readAsText","newRules","generatePlanning","reqData","method","url","headers","axios","then","console","log","catch","statusText","OnCallTimeContainer","map","Label","color","horizontal","style","marginTop","Icon","name","cursor","onClick","initialValue","save","newOnCallTime","updateOnCallTimes","Popup","content","inverted","basic","trigger","addOnCallTimes","AvailabilitiesContainer","Table","celled","padded","Header","Row","textAlign","HeaderCell","singleLine","width","newSlot","updateSlots","Cell","Button","circular","icon","Body","newPerson","normalize","replace","updatePeople","selectable","positive","negative","handleChangeOnAvailabilities","addPerson","PlanningContainer","Group","Dropdown","clearable","className","placeholder","fluid","options","onChange","i","datas","handleChangeOnPlanning","selection","resetPlanning","useRulesForm","ruleName","ruleId","existingRule","param","counter","on_call_times","exigency","disable","setRule","filteredPeopleChoice","concat","includes","filteredSlotsChoice","onCallTimesChoice","String","peopleChoice","slotsChoice","formData","setFormData","handleChangeOnCounter","newValue","parseInt","handleCloseOnModal","modalSettings","setModalSettings","isOpen","RulesForm","onCallTimesChosen","peopleChosen","slotsChosen","Container","Grid","columns","Column","newMethod","handleChangeOnMethod","Input","min","handleChangeOnParam","type","removeOnCallTimeInRule","sort","addOnCallTimeInRule","Checkbox","toggle","checked","removeSlotInRule","b","addSlotInRule","removePersonInRule","addPersonInRule","Divider","submitForm","useModalForm","RulesTable","columnsName","Modal","open","onClose","Content","index","removeRule","handleEditRule","itm","split","isEmpty","reduce","s","handleOpenOnModal","RulesContainer","containers","title","panels","_","times","Accordion","exclusive","MenuContainer","isRuleOpen","isResetOpen","setIsResetOpen","selectedRuleFile","setSelectedRuleFile","Menu","Item","header","position","exportFromJSON","onCallTimesCount","fileName","exportType","types","json","htmlFor","fontWeight","marginRight","accept","target","files","display","Actions","filename","handleOpenResetDefaultConfirm","Confirm","onCancel","handleCloseResetDefaultConfirm","onConfirm","resetDefaultData","handleOpenResetConfirm","handleCloseResetConfirm","resetData","Footer","Segment","as","href","App","size","paddingLeft","paddingTop","overflow","minHeight","Dimmer","active","page","Loader","Message","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8569d937.chunk.js","sourcesContent":["import config from './resplanning-config.json'\n\nconst {\n    onCallTimes,\n    rulesByPerson,\n    rulesBySlot,\n    slots,\n    slotCount,\n    onCallTimeCount\n} = config\n\nexport const defaultData = {\n    slots: slots,\n    people: [\n        {key: 0, text: 'Personne'},\n        {key: 1, text: 'Personne'},\n        {key: 2, text: 'Personne'},\n        {key: 3, text: 'Personne'},\n        {key: 4, text: 'Personne'},\n        {key: 5, text: 'Personne'},\n        {key: 6, text: 'Personne'},\n        {key: 7, text: 'Personne'},\n        {key: 8, text: 'Personne'},\n        {key: 9, text: 'Personne'}\n    ],\n    onCallTimes: onCallTimes,\n    rulesByPerson: rulesByPerson,\n    rulesBySlot: rulesBySlot,\n    planning: {\n        0: {0: null, 1: null, 2: null, 3: null, 4: null, 5: null, 6: null, 7: null, 8: null},\n        1: {0: null, 1: null, 2: null, 3: null, 4: null, 5: null, 6: null, 7: null, 8: null},\n        2: {0: null, 1: null, 2: null, 3: null, 4: null, 5: null, 6: null, 7: null, 8: null},\n        3: {0: null, 1: null, 2: null, 3: null, 4: null, 5: null, 6: null, 7: null, 8: null},\n        4: {0: null, 1: null, 2: null, 3: null, 4: null, 5: null, 6: null, 7: null, 8: null},\n        5: {0: null, 1: null, 2: null, 3: null, 4: null, 5: null, 6: null, 7: null, 8: null},\n        6: {0: null, 1: null, 2: null, 3: null, 4: null, 5: null, 6: null, 7: null, 8: null},\n        7: {0: null, 1: null, 2: null, 3: null, 4: null, 5: null, 6: null, 7: null, 8: null},\n        8: {0: null, 1: null, 2: null, 3: null, 4: null, 5: null, 6: null, 7: null, 8: null},\n        9: {0: null, 1: null, 2: null, 3: null, 4: null, 5: null, 6: null, 7: null, 8: null}\n    },\n    callback: {\n        error: false,\n        message: { status: null, statusMsg: null }\n    },\n    onCallTimeCount: onCallTimeCount,\n    slotCount: slotCount,\n    personCount: 10,\n    loading: false,\n    confirmResetOpen: false,\n    confirmResetDefaultOpen: false,\n}","import { useState } from 'react'\nimport { defaultData } from '../../assets/defaultData'\n\nconst usePlanning = () => {\n    const colors = ['blue', 'red', 'orange', 'yellow', 'olive', 'green', 'teal', 'violet', 'purple', 'pink', 'brown']\n\n    const saved = localStorage.getItem(\"data\")\n\n    const [data, setData] = useState(saved !== null ? JSON.parse(saved) : defaultData)\n\n    return {\n        data,\n        setData,\n        colors\n    }\n}\n\nexport default usePlanning","const prod = {\n    API_URL: 'https://resplanning-back.herokuapp.com'\n}\n\nconst local = {\n    API_URL: 'http://127.0.0.1:8000'\n}\n\nexport const apiConfig = prod","import axios from 'axios'\nimport { apiConfig } from '../utils/ApiConfig'\nimport { defaultData } from '../../assets/defaultData'\n\nexport const addSlot = (data, setData) => {\n    data.slots = [...data.slots, {key: data.slotCount, text: '00h00'}]\n    data.people.forEach(({ key }) =>\n        data.planning[key][data.slotCount] = null\n    )\n    data.slotCount += 1\n\n    localStorage.setItem(\"data\", JSON.stringify({...data}))\n    setData({...data})\n}\n\nexport const addPerson = (data, setData) => {\n    data.people = [...data.people, {key: data.personCount, text: 'Personne'}]\n    data.planning[data.personCount] = {}\n    data.slots.forEach(slot => {\n        data.planning[data.personCount][slot.key] = null\n    })\n    data.personCount += 1\n\n    localStorage.setItem(\"data\", JSON.stringify({...data}))\n    setData({...data})\n}\n\nexport const addOnCallTimes = (data, setData) => {\n    data.onCallTimes = [...data.onCallTimes, {key: data.onCallTimeCount, text: 'Perm', value: data.onCallTimeCount}]\n    data.onCallTimeCount += 1\n\n    localStorage.setItem(\"data\", JSON.stringify({...data}))\n    setData({...data})\n}\n\nexport const removeSlot = (data, setData, slotId) => {\n    data.slots = data.slots.filter(e  => e.key !== slotId)\n    data.people.forEach(person =>\n        delete data.planning[person.key][slotId]\n    )\n    data.rulesBySlot.forEach(item =>\n        item.slots = item.slots.filter(e => e !== slotId)\n    )\n    data.rulesByPerson.forEach(item =>\n        item.people = item.people.filter(e => e !== slotId)\n    )\n\n    localStorage.setItem(\"data\", JSON.stringify({...data}))\n    setData({...data})\n}\n\nexport const removePerson = (data, setData, personId) => {\n    data.people = data.people.filter(e => e.key !== personId)\n    delete data.planning[personId]\n    data.rulesBySlot.forEach(item =>\n        item.slots = item.slots.filter(e => e !== personId)\n    )\n    data.rulesByPerson.forEach(item =>\n        item.people = item.people.filter(e => e !== personId)\n    )\n\n    localStorage.setItem(\"data\", JSON.stringify({...data}))\n    setData({...data})\n}\n\nexport const removeAllPeople = (data, setData) => {\n    const { people } = data\n    people.forEach(({ key }) => {\n        removePerson(data, setData, key)\n    })\n}\n\nexport const removeOnCallTime = (data, setData, onCallTimeId) => {\n    data.onCallTimes = data.onCallTimes.filter(e => e.key !== onCallTimeId)\n    data.people.forEach(person  => {\n        data.slots.forEach(slot  => {\n            if (slot.key in data.planning[person.key] && data.planning[person.key][slot.key] === onCallTimeId){\n                data.planning[person.key][slot.key] = null\n            }\n        })\n    })\n\n    localStorage.setItem(\"data\", JSON.stringify({...data}))\n    setData({...data})\n}\n\nexport const removeAllOnCallTime = (data, setData) => {\n    const { onCallTimes } = data\n    onCallTimes.forEach(({ key }) => {\n        if ( key !== 0 ) {\n            removeOnCallTime(data, setData, key)\n        }\n    })\n}\n\nexport const removeRule = (rule, data, setData, index) => {\n    if (rule === 'slot'){\n        data.rulesBySlot = data.rulesBySlot.filter((e, i) => i !== index)\n    } else if  (rule === 'person'){\n        data.rulesByPerson = data.rulesByPerson.filter((e, i) => i !== index)\n    }\n\n    localStorage.setItem(\"data\", JSON.stringify({...data}))\n    setData({ ...data })\n}\n\nexport const removeAllSlots = (data, setData) => {\n    const { slots } = data\n    slots.forEach(({ key }) => {\n        removeSlot(data, setData, key)\n    })\n}\n\nexport const updateSlots = (data, setData, newSlot, slotId) => {\n    data.slots.find(e => e.key === slotId).text = newSlot\n\n    localStorage.setItem(\"data\", JSON.stringify({...data}))\n    setData({...data})\n}\n\nexport const updatePeople = (data, setData, newPerson, personId) => {\n    data.people.find(e => e.key === personId).text = newPerson.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")\n\n    localStorage.setItem(\"data\", JSON.stringify({...data}))\n    setData({...data})\n}\n\nexport const updateOnCallTimes = (data, setData, newOnCallTime, onCallTimeId) => {\n    data.onCallTimes.find(e => e.key === onCallTimeId).text = newOnCallTime\n\n    localStorage.setItem(\"data\", JSON.stringify({...data}))\n    setData({...data})\n}\n\nexport const handleChangeOnAvailabilities = (data, setData, personId, slotId) => {\n    if (slotId in data.planning[personId]){\n        delete data.planning[personId][slotId]\n    } else {\n        data.planning[personId][slotId] = null\n    }\n\n    localStorage.setItem(\"data\", JSON.stringify({...data}))\n    setData({...data})\n}\n\nexport const handleChangeOnPlanning = (data, setData, value, personId, slotId) => {\n    data.planning[personId][slotId] = value !== '' ? data.onCallTimes.find(e => e.value === value).key : null\n\n    localStorage.setItem(\"data\", JSON.stringify({...data}))\n    setData({...data})\n}\n\nexport const getOnCallTimeValue = (data,  personId, slotId) => {\n    let key = null\n    if (slotId in data.planning[personId]){\n        key = data.planning[personId][slotId]\n    }\n    if (key !== null) {\n        const onCallTime = data.onCallTimes.find(e => e.key === key)\n        if (onCallTime) {\n            return onCallTime.value\n        }\n    }\n    return null\n}\n\nexport const getCsvData = (data) => {\n    const csvData = [['Personnes']]\n    data.slots.forEach(slot => {\n        csvData[0].push(slot.text)\n    })\n    data.people.forEach(person => {\n        const csvRow = [data.people.find(e => e.key === person.key).text]\n        data.slots.forEach(slot => {\n            let key = null\n            if (slot.key in data.planning[person.key]){\n                key = data.planning[person.key][slot.key]\n            }\n            csvRow.push(key !== null ? data.onCallTimes.find(e => e.key === key).text : null)\n        })\n        csvData.push(csvRow)\n    })\n    return csvData\n}\n\nexport const resetData = (data, setData) => {\n    data = {\n        slots: [],\n        people: [],\n        onCallTimes: [\n            {\n                key: 0,\n                text: \"Pause\",\n                value: 0\n            }\n        ],\n        rulesByPerson: [],\n        rulesBySlot: [],\n        planning: {},\n        callback: {\n            error: false,\n            message: { status: null, statusMsg: null }\n        },\n        onCallTimeCount: 1,\n        slotCount: 0,\n        personCount: 0,\n        loading: false,\n        confirmResetOpen: false,\n        confirmResetDefaultOpen: false,\n    }\n\n    localStorage.setItem(\"data\", JSON.stringify({...data}))\n    setData({...data})\n}\n\nexport const resetDefaultData = (data, setData) => {\n    localStorage.setItem(\"data\", JSON.stringify(defaultData))\n    setData(defaultData)\n}\n\nexport const resetPlanning = (data, setData) => {\n    data.people.forEach(person => {\n        data.slots.forEach(slot => {\n            if (slot.key in data.planning[person.key]){\n                data.planning[person.key][slot.key] = null\n            }\n        })\n    })\n\n    localStorage.setItem(\"data\", JSON.stringify({...data}))\n    setData({...data})\n}\n\nconst getIdsToSend = (array) => {\n    const arrayTmp = []\n    array.forEach(e => arrayTmp.push(e.key))\n    return arrayTmp\n}\n\nconst adaptImportRules = (data, rules) => {\n    rules.forEach( rule => {\n        if (rule.slots.length > 0 && rule.slots[0] !== -1) {\n            rule.slots = rule.slots.filter(id => data.slots.find(({ key }) => key === id))\n        } else {\n            rule.slots = [-1]\n        }\n        if (rule.people.length > 0 && rule.people[0] !== -1) {\n            rule.people = rule.people.filter(id => data.people.find(({ key }) => key === id))\n        } else {\n            rule.people = [-1]\n        }\n    })\n    return rules\n}\n\nexport const importRules = async (data, setData, file, setFile, setIsRuleOpen) => {\n    if (file !== null) {\n        let response = '{}'\n        await new Promise((resolve) => {\n            const reader = new FileReader()\n            reader.onload = function() {\n                response = reader.result\n                resolve()\n            }\n            reader.readAsText(file)\n        })\n        const newRules = JSON.parse(response)\n        const {\n            onCallTimes,\n            rulesByPerson,\n            rulesBySlot,\n            onCallTimeCount\n        } = newRules\n        removeAllOnCallTime(data, setData)\n        data.onCallTimes = onCallTimes\n        data.rulesBySlot = adaptImportRules(data, rulesBySlot)\n        data.rulesByPerson = adaptImportRules(data, rulesByPerson)\n        data.onCallTimeCount = onCallTimeCount\n\n        localStorage.setItem(\"data\", JSON.stringify({...data}))\n        setData({...data})\n\n        setFile(null)\n    }\n    setIsRuleOpen(false)\n}\n\nexport const importCsv = async (data, setData, file, setFile, setIsImportOpen) => {\n    data.loading = true\n\n    localStorage.setItem(\"data\", JSON.stringify({...data}))\n    setData({...data})\n\n    if (file !== null) {\n        const reqData = new FormData()\n        reqData.append('file', file)\n        const config = {\n            method: 'POST',\n            url: apiConfig.API_URL + '/parse-csv/',\n            data : reqData\n        }\n        await axios(config)\n            .then(function (response) {\n                removeAllPeople(data, setData)\n                removeAllSlots(data, setData)\n                data.people = JSON.parse(JSON.stringify(response.data.people))\n                data.slots = JSON.parse(JSON.stringify(response.data.slots))\n                data.personCount = data.people.length\n                data.slotCount = data.slots.length\n                data.planning = JSON.parse(JSON.stringify(response.data.planning))\n            })\n            .catch(function (error) {\n                console.log(error)\n            });\n    }\n    setFile(null)\n    setIsImportOpen(false)\n    data.loading = false\n\n    localStorage.setItem(\"data\", JSON.stringify({...data}))\n    setData({...data})\n}\n\nexport const generatePlanning = async (data, setData) => {\n    data.loading = true\n\n    localStorage.setItem(\"data\", JSON.stringify({...data}))\n    setData({...data})\n\n    const reqData = JSON.stringify({\n        \"planning\": data.planning,\n        \"on_call_times\": getIdsToSend(data.onCallTimes),\n        \"slots\": getIdsToSend(data.slots),\n        \"people\": getIdsToSend(data.people),\n        \"rules_by_person\": data.rulesByPerson,\n        \"rules_by_slot\": data.rulesBySlot\n    })\n    const config = {\n        method: 'POST',\n        url: apiConfig.API_URL + '/generate/',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        data : reqData\n    }\n    await axios(config)\n        .then(function (response) {\n            data.planning = JSON.parse(JSON.stringify(response.data.planning))\n            data.loading = false\n\n            localStorage.setItem(\"data\", JSON.stringify({...data}))\n            setData({...data})\n\n            console.log(data.planning)\n        })\n        .catch(function (error) {\n            data.callback.error = true\n            data.callback.message = { status: error?.response?.status, statusMsg: error?.response?.statusText }\n            data.loading = false\n\n            localStorage.setItem(\"data\", JSON.stringify({...data}))\n            setData({...data})\n        });\n}","import usePlanning from '../hooks/usePlanning'\nimport {Icon, Label, Popup} from 'semantic-ui-react'\nimport EditableLabel from 'react-editable-label'\nimport {addOnCallTimes, removeOnCallTime, updateOnCallTimes} from '../helpers/PlanningHelper';\n\nconst OnCallTimeContainer = ({ data, setData }) => {\n    const {\n        colors\n    } = usePlanning()\n\n    return (\n        <>\n            <div>\n                <b>La première permanence complète le planning par défaut</b>\n            </div>\n            {\n                data.onCallTimes.map(\n                    ({ key, text }) =>\n                        <Label key={key} color={colors[key%colors.length]} horizontal style={{ marginTop: '1vh'}}>\n                            { key !== 0 && <Icon\n                                name='remove'\n                                style={{ cursor: 'pointer' }}\n                                onClick={() => removeOnCallTime(data, setData, key)}\n                            />}\n                            <EditableLabel\n                                initialValue={text}\n                                save={value => updateOnCallTimes(data, setData, value, key)}\n                            />\n                        </Label>\n                )\n            }\n            <Popup content='Ajouter une permanence' inverted basic trigger={\n                <Icon\n                    color='green'\n                    name='add'\n                    style={{ cursor: 'pointer' }}\n                    onClick={() => addOnCallTimes(data, setData)}\n                />\n            } />\n        </>\n    )\n}\n\nexport default OnCallTimeContainer","import { Button, Icon, Table } from 'semantic-ui-react'\nimport EditableLabel from 'react-editable-label'\nimport {\n    addPerson,\n    addSlot,\n    handleChangeOnAvailabilities,\n    removePerson, removeSlot,\n    updatePeople,\n    updateSlots\n} from \"../helpers/PlanningHelper\";\n\nconst AvailabilitiesContainer = ({ data, setData }) => {\n    return (\n        <>\n            <Table celled padded color='green'>\n                <Table.Header>\n                    <Table.Row textAlign='center'>\n                        <Table.HeaderCell singleLine width={4}>\n                            Personnes\n                        </Table.HeaderCell>\n                        {\n                            data.slots.map(slot =>\n                                <Table.HeaderCell singleLine key={slot.key}>\n                                    <Icon\n                                        color='red'\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removeSlot(data, setData, slot.key)}\n                                    />\n                                    <EditableLabel\n                                        initialValue={slot.text}\n                                        save={value => updateSlots(data, setData, value, slot.key)}\n                                    />\n                                </Table.HeaderCell>\n                            )\n                        }\n                        <Table.Cell>\n                            <Button\n                                circular\n                                color='green'\n                                icon='add'\n                                onClick={() => addSlot(data, setData)}\n                            />\n                        </Table.Cell>\n                        {/*\n                        <Table.Cell>\n                            <Button color='green' onClick={() => addSlot(data, setData)}>Insérer</Button>\n                        </Table.Cell>\n                        */}\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                    {\n                        data.people.map(person =>\n                            <Table.Row key={person.key}>\n                                <Table.Cell singleLine textAlign='center'>\n                                    <Icon\n                                        color='red'\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removePerson(data, setData, person.key)}\n                                    />\n                                    <EditableLabel\n                                        initialValue={person.text}\n                                        save={value => updatePeople(data, setData, value, person.key)}\n                                    />\n                                </Table.Cell>\n                                {\n                                    data.slots.map(slot =>\n                                        <Table.Cell\n                                            selectable\n                                            positive={slot.key in data.planning[person.key]}\n                                            negative={!(slot.key in data.planning[person.key])}\n                                            onClick={() => {\n                                                handleChangeOnAvailabilities(data, setData, person.key, slot.key)\n                                            }}\n                                            key={person+slot+person.key+slot.key}\n                                        />\n                                    )\n                                }\n                            </Table.Row>\n                        )\n                    }\n                </Table.Body>\n            </Table>\n            <Button color='green' onClick={() => {addPerson(data, setData)}}>\n                Ajouter une personne\n            </Button>\n        </>\n    )\n}\n\nexport default AvailabilitiesContainer","import { Button, Dropdown, Icon, Table } from 'semantic-ui-react'\nimport {\n    addPerson,\n    addSlot,\n    getOnCallTimeValue,\n    handleChangeOnPlanning,\n    removePerson,\n    removeSlot, resetPlanning\n} from '../helpers/PlanningHelper'\nimport usePlanning from \"../hooks/usePlanning\";\n\nconst PlanningContainer = ({ data, setData }) => {\n    const {\n        colors\n    } = usePlanning()\n\n    return (\n        <>\n            <b>Pense à vider le planning si tu veux en générer un nouveau</b>\n            <Table celled padded color='green'>\n                <Table.Header>\n                    <Table.Row textAlign='center'>\n                        <Table.HeaderCell singleLine width={4}>\n                            Personnes\n                        </Table.HeaderCell>\n                        {\n                            data.slots.map(slot =>\n                                <Table.HeaderCell singleLine key={slot.key}>\n                                    <Icon\n                                        color='red'\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removeSlot(data, setData, slot.key)}\n                                    />\n                                    {slot.text}\n                                </Table.HeaderCell>\n                            )\n                        }\n                        <Table.Cell>\n                            <Button\n                                circular\n                                color='green'\n                                icon='add'\n                                onClick={() => addSlot(data, setData)}\n                            />\n                        </Table.Cell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                    {\n                        data.people.map(person =>\n                            <Table.Row key={person.key}>\n                                <Table.Cell singleLine textAlign='center'>\n                                    <Icon\n                                        color='red'\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removePerson(data, setData, person.key)}\n                                    />\n                                    {person.text}\n                                </Table.Cell>\n                                {\n                                    data.slots.map(slot =>\n                                        <Table.Cell singleLine key={person+slot+person.key+slot.key}>\n                                            {\n                                                slot.key in data.planning[person.key] ?\n                                                    <Button.Group\n                                                        color={\n                                                            getOnCallTimeValue(data, person.key, slot.key) !== null ?\n                                                                colors[getOnCallTimeValue(data, person.key, slot.key)%colors.length] :\n                                                                null\n                                                        }\n                                                    >\n                                                        <Dropdown\n                                                            clearable\n                                                            className='button'\n                                                            placeholder='Perm'\n                                                            fluid\n                                                            value={ getOnCallTimeValue(data, person.key, slot.key) }\n                                                            options={data.onCallTimes}\n                                                            onChange={(i, datas) => {\n                                                                handleChangeOnPlanning(data, setData, datas.value, person.key, slot.key)\n                                                            }}\n                                                            selection\n                                                            style={{ width: '100%' }}\n                                                        />\n                                                    </Button.Group>\n                                                     :\n                                                    null\n                                            }\n                                        </Table.Cell>\n                                    )\n                                }\n                            </Table.Row>\n                        )\n                    }\n                </Table.Body>\n            </Table>\n            <Button color='red' onClick={() => resetPlanning(data, setData)}>Vider</Button>\n        </>\n    )\n}\n\nexport default PlanningContainer","import { useState } from 'react'\n\nconst useRulesForm = (data, ruleName, ruleId) => {\n    const {\n        onCallTimes,\n        people,\n        slots,\n        rulesBySlot,\n        rulesByPerson\n    } = data\n\n    const existingRule = ruleName === 'slot' ?\n        rulesBySlot[ruleId] :\n        rulesByPerson[ruleId]\n\n    const [rule, setRule] = useState(existingRule ? {...existingRule} : {\n        method: \"exact\",\n        param: 0,\n        counter: -1,\n        slots: [],\n        people: [],\n        on_call_times: [],\n        exigency: 0,\n        disable: false\n    })\n\n    const filteredPeopleChoice = rule.people[0] !== -1 ?\n        [{key: -1, text: 'Tout le monde', value: -1}].concat(people.filter(({ key }) => !rule.people.includes(key))) :\n        []\n\n    const filteredSlotsChoice = rule.slots[0] !== -1 ?\n        [{key: -1, text: 'Tous les créneaux', value: -1}].concat(slots.filter(({ key }) => !rule.slots.includes(key))) :\n        []\n\n    const [formData, setFormData] = useState({\n        onCallTimesChoice: onCallTimes.filter(({ key }) => !rule.on_call_times.includes(String(key))),\n        peopleChoice: filteredPeopleChoice,\n        slotsChoice: filteredSlotsChoice,\n    })\n\n    return {\n        rule,\n        setRule,\n        formData,\n        setFormData\n    }\n}\n\nexport default useRulesForm","export const handleChangeOnMethod = (rule, setRule, newMethod) => {\n    rule.method = newMethod ? newMethod : 'exact'\n    setRule({...rule})\n}\n\nexport const handleChangeOnParam = (rule, setRule, newValue) => {\n    rule.param = parseInt(newValue)\n    setRule({...rule})\n}\n\nexport const handleChangeOnCounter = (rule, setRule, newValue) => {\n    rule.counter = parseInt(newValue)\n    setRule({...rule})\n}\n\nexport const addOnCallTimeInRule = (rule, setRule, formData, setFormData, onCallTimeId) => {\n    rule.on_call_times = [...rule.on_call_times, String(onCallTimeId)].sort()\n    formData.onCallTimesChoice = formData.onCallTimesChoice.filter(({ key }) => key !== onCallTimeId)\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const addSlotInRule = (rule, setRule, formData, setFormData, slotId) => {\n    rule.slots = slotId === -1 ? [slotId] : [...rule.slots, slotId].sort((a, b) => a.key - b.key)\n    formData.slotsChoice = slotId === -1 ? [] : formData.slotsChoice.filter(({ key }) => key !== slotId)\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const addPersonInRule = (rule, setRule, formData, setFormData, personId) => {\n    rule.people = personId === -1 ? [personId] : [...rule.people, personId].sort((a, b) => a.key - b.key)\n    formData.peopleChoice = personId === -1 ? [] : formData.peopleChoice.filter(({ key }) => key !== personId)\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const removeOnCallTimeInRule = (rule, setRule, formData, setFormData, data, onCallTimeId) => {\n    rule.on_call_times = rule.on_call_times.filter(id => id !== onCallTimeId)\n    formData.onCallTimesChoice = data.onCallTimes.filter(({ key }) => !rule.on_call_times.includes(String(key)))\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const removeSlotInRule = (rule, setRule, formData, setFormData, slots, slotId) => {\n    rule.slots = rule.slots.filter(id => id !== slotId)\n    formData.slotsChoice = [{key: -1, text: 'Tous les créneaux', value: -1}].concat(\n        slots.filter(({ key }) => !rule.slots.includes(key))\n    )\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const removePersonInRule = (rule, setRule, formData, setFormData, people, personId) => {\n    rule.people = rule.people.filter(id => id !== personId)\n    formData.peopleChoice = [{key: -1, text: 'Tout le monde', value: -1}].concat(\n        people.filter(({ key }) => !rule.people.includes(key))\n    )\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const handleOpenResetConfirm = (data, setData) => {\n    data.confirmResetOpen = true\n    setData({...data})\n}\n\nexport const handleOpenResetDefaultConfirm = (data, setData) => {\n    data.confirmResetDefaultOpen = true\n    setData({...data})\n}\n\nexport const handleCloseResetConfirm = (data, setData) => {\n    data.confirmResetOpen = false\n    setData({...data})\n}\n\nexport const handleCloseResetDefaultConfirm = (data, setData) => {\n    data.confirmResetDefaultOpen = false\n    setData({...data})\n}\n\nexport const handleCloseOnModal = (modalSettings, setModalSettings) => {\n    modalSettings.isOpen = false\n    setModalSettings({...modalSettings})\n}\n\nexport const handleOpenOnModal = (modalSettings, setModalSettings) => {\n    modalSettings.isOpen = true\n    modalSettings.ruleId = null\n    setModalSettings({...modalSettings})\n}\n\nexport const handleEditRule = (modalSettings, setModalSettings, id) => {\n    modalSettings.isOpen = true\n    modalSettings.ruleId = id\n    setModalSettings({...modalSettings})\n}\n\nexport const submitForm = (modalSettings, setModalSettings, rule, ruleName, ruleId, data, setData) => {\n    const {\n        rulesBySlot,\n        rulesByPerson\n    } = data\n\n    const rules = ruleName === 'slot' ?\n        rulesBySlot :\n        rulesByPerson\n\n    if ( rules[ruleId] ) {\n        rules[ruleId] = rule\n    } else {\n        rules.push(rule)\n    }\n\n    localStorage.setItem(\"data\", JSON.stringify({...data}))\n    setData({...data})\n\n    modalSettings.isOpen = false\n    setModalSettings({...modalSettings})\n}","import {Button, Checkbox, Container, Divider, Dropdown, Grid, Icon, Input, Label} from 'semantic-ui-react'\nimport usePlanning from '../hooks/usePlanning'\nimport useRulesForm from '../hooks/useRulesForm'\nimport {\n    addOnCallTimeInRule,\n    addPersonInRule,\n    addSlotInRule, handleChangeOnCounter, handleChangeOnMethod, handleChangeOnParam, handleCloseOnModal,\n    removeOnCallTimeInRule, removePersonInRule,\n    removeSlotInRule, submitForm\n} from \"../helpers/FormHelper\";\n\nconst RulesForm = ({ modalSettings, setModalSettings, ruleName, ruleId, data, setData }) => {\n    const {\n        rule,\n        setRule,\n        formData,\n        setFormData\n    } = useRulesForm(data, ruleName, ruleId)\n\n    const {\n        onCallTimes,\n        people,\n        slots\n    } = data\n\n    const {\n        onCallTimesChoice,\n        peopleChoice,\n        slotsChoice,\n    } = formData\n\n    const {\n        on_call_times: onCallTimesChosen,\n        people: peopleChosen,\n        slots: slotsChosen\n    } = rule\n\n    const {\n        colors\n    } = usePlanning()\n\n    const methodOptions = [\n        { key: 'exact', value: 'exact', text: 'Exactement'},\n        { key: 'at_least', value: 'at_least', text: 'Au moins'},\n        { key: 'at_most', value: 'at_most', text: 'Au plus'},\n    ]\n\n    return(\n        <Container>\n            <Grid>\n                <Grid.Row columns={4}>\n                    <Grid.Column>\n                        <h3>Méthode :</h3>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Dropdown\n                            clearable={rule.method !== 'exact'}\n                            value={rule.method}\n                            selection\n                            onChange={(i, datas) => handleChangeOnMethod(rule, setRule, datas.value)}\n                            options={methodOptions}\n                        />\n                    </Grid.Column>\n                    <Grid.Column>\n                        <h3>Combien :</h3>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Input\n                            value={rule.param}\n                            min={0}\n                            onChange={(i, datas) => {\n                                handleChangeOnParam(rule, setRule, datas.value)\n                                if (rule.counter !== -1) {\n                                    handleChangeOnCounter(rule, setRule, rule.param + 1)\n                                }\n                            }}\n                            type='number'\n                        />\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row columns={2}>\n                    <Grid.Column>\n                        <h3>Permanences :</h3>\n                    </Grid.Column>\n                    <Grid.Column>\n                        {\n                            onCallTimesChosen.map(onCallTimeId =>\n                                <Label\n                                    key={onCallTimeId}\n                                    color={colors[onCallTimeId%colors.length]}\n                                    style={{ marginTop: '0.5vh'}}\n                                >\n                                    <Icon\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removeOnCallTimeInRule(rule, setRule, formData, setFormData, data, onCallTimeId)}\n                                    />\n                                    {onCallTimes.find(({ key }) => key === parseInt(onCallTimeId)).text}\n                                </Label>\n                            )\n                        }\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    {\n                        onCallTimesChoice.map(({ key, text }) =>\n                            <Label\n                                horizontal\n                                key={key}\n                                color={colors[key%colors.length]}\n                                style={{ cursor: 'pointer', marginTop: '0.5vh' }}\n                                onClick={() => addOnCallTimeInRule(rule, setRule, formData, setFormData, key)}\n                            >\n                                {text}\n                            </Label>\n                        )\n                    }\n                </Grid.Row>\n                { ruleName === 'person' &&\n                    (<Grid.Row columns={4}>\n                        <Grid.Column>\n                            <h3>À la suite ?</h3>\n                        </Grid.Column>\n                        <Grid.Column>\n                            <Checkbox\n                                toggle\n                                checked={rule.counter !== -1}\n                                onChange={() => {\n                                    handleChangeOnCounter(rule, setRule, rule.counter === -1 ? rule.param + 1 : -1)\n                                }}\n                            />\n                        </Grid.Column>\n                    </Grid.Row>)\n                }\n                <Grid.Row columns={2}>\n                    <Grid.Column>\n                        <h3>Créneaux :</h3>\n                    </Grid.Column>\n                    <Grid.Column>\n                        {\n                            slotsChosen.map(slot =>\n                                <Label\n                                    horizontal\n                                    key={slot}\n                                    color={slot === -1 ? 'purple' : colors[slot%colors.length]}\n                                    style={{ marginTop: '0.5vh'}}\n                                >\n                                    <Icon\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removeSlotInRule(rule, setRule, formData, setFormData, slots, slot)}\n                                    />\n                                    {slot === -1 ? 'Tous les créneaux' : slots.find(({ key }) => key === slot).text}\n                                </Label>\n                            )\n                        }\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    {\n                        slotsChoice.map(({ key, text }) =>\n                            <Label\n                                key={key}\n                                color={key === -1 ? 'purple' : colors[key%colors.length]}\n                                style={{ cursor: 'pointer', marginTop: '0.5vh' }}\n                                onClick={() => addSlotInRule(rule, setRule, formData, setFormData, key)}\n                            >\n                                {text}\n                            </Label>\n                        )\n                    }\n                </Grid.Row>\n                <Grid.Row columns={2}>\n                    <Grid.Column>\n                        <h3>Personnes :</h3>\n                    </Grid.Column>\n                    <Grid.Column>\n                        {\n                            peopleChosen.map(person =>\n                                <Label\n                                    horizontal\n                                    key={person}\n                                    color={person === -1 ? 'teal' : colors[person%colors.length]}\n                                    style={{ marginTop: '0.5vh'}}\n                                >\n                                    <Icon\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removePersonInRule(rule, setRule, formData, setFormData, people, person)}\n                                    />\n                                    {person === -1 ? 'Tout le monde' : people.find(({ key }) => key === person).text}\n                                </Label>\n                            )\n                        }\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    {\n                        peopleChoice.map(({ key, text }) =>\n                            <Label\n                                key={key}\n                                color={key === -1 ? 'teal' : colors[key%colors.length]}\n                                style={{ cursor: 'pointer', marginTop: '0.5vh' }}\n                                onClick={() => addPersonInRule(rule, setRule, formData, setFormData, key)}\n                            >\n                                {text}\n                            </Label>\n                        )\n                    }\n                </Grid.Row>\n            </Grid>\n            <Divider />\n            <Button negative onClick={() => handleCloseOnModal(modalSettings, setModalSettings)}>Annuler</Button>\n            <Button positive onClick={() => submitForm(modalSettings, setModalSettings, rule, ruleName, ruleId, data, setData)}>Sauvegarder</Button>\n        </Container>\n    )\n}\n\nexport default RulesForm","import {useState} from 'react'\n\nconst useModalForm = () => {\n    const [modalSettings, setModalSettings] = useState({\n        isOpen: false,\n        ruleId: null\n    })\n\n    return {\n        modalSettings,\n        setModalSettings\n    }\n}\n\nexport default useModalForm","import {Button, Checkbox, Icon, Label, Modal, Table} from 'semantic-ui-react'\nimport usePlanning from '../hooks/usePlanning'\nimport { removeRule } from '../helpers/PlanningHelper'\nimport {isEmpty} from 'lodash'\nimport RulesForm from './RulesForm'\nimport {handleCloseOnModal, handleEditRule, handleOpenOnModal} from \"../helpers/FormHelper\";\nimport useModalForm from \"../hooks/useModalForm\";\n\nconst RulesTable = ({ name, data, setData }) => {\n    const {\n        colors\n    } = usePlanning()\n\n    const rules = name === 'slot' ? data.rulesBySlot : data.rulesByPerson\n\n    const {\n        modalSettings,\n        setModalSettings\n    } = useModalForm()\n\n    const columnsName = name === 'person' ?\n        ['', '', 'Méthode', 'Paramètre', 'Permanences', '', 'Créneaux', 'Personnes', 'Actif'] :\n        ['', '', 'Méthode', 'Paramètre', 'Permanences', 'Créneaux', 'Personnes', 'Actif']\n\n    return (\n        <>\n            <Modal\n                open={modalSettings.isOpen}\n                onClose={() => handleCloseOnModal(modalSettings, setModalSettings)}\n            >\n                <Modal.Header>Règle par {name === 'slot' ? 'créneau' : 'personne'}</Modal.Header>\n                <Modal.Content>\n                    <RulesForm\n                        modalSettings={modalSettings}\n                        setModalSettings={setModalSettings}\n                        ruleId={modalSettings.ruleId}\n                        ruleName={name}\n                        data={data}\n                        setData={setData}\n                    />\n                </Modal.Content>\n            </Modal>\n            {\n                name === 'slot' &&\n                <div>\n                    <b>Si une permanence n'apparaît pas sur un créneau, elle est automatiquement désactivée</b>\n                </div>\n            }\n            <Table celled padded color='blue'>\n                <Table.Header>\n                    <Table.Row>\n                        {\n                            columnsName.map((item, index) =>\n                                <Table.HeaderCell key={index}>\n                                    {item}\n                                </Table.HeaderCell>\n                            )\n                        }\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {\n                        rules.map((item, index) =>\n                            <Table.Row key={item+index}>\n                                <Table.Cell style={{ textAlign: 'center' }}>\n                                    <Icon\n                                        color='red'\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removeRule(name, data, setData, index)}\n                                    />\n                                </Table.Cell>\n                                <Table.Cell style={{ textAlign: 'center' }}>\n                                    <Icon\n                                        color='blue'\n                                        name='edit'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => handleEditRule(modalSettings, setModalSettings, index)}\n                                    />\n                                </Table.Cell>\n                                <Table.Cell>\n                                    {item.method === 'at_least'  && 'Au moins'}\n                                    {item.method === 'at_most'  && 'Au plus'}\n                                    {item.method === 'exact'  && 'Exactement'}\n                                </Table.Cell>\n                                <Table.Cell style={{ textAlign: 'center' }}>\n                                    {item.param}\n                                </Table.Cell>\n                                <Table.Cell>\n                                    {item.on_call_times.map(itm => {\n                                        const onCallTimes = data.onCallTimes.filter(e => itm.split('+').map(i => (parseInt(i))).includes(e.key))\n                                        if (!isEmpty(onCallTimes)){\n                                            return (\n                                                <Label\n                                                    key={itm}\n                                                    color={colors[onCallTimes.length > 1 ? onCallTimes.reduce((s, a) => s + a.key, 0)*10%colors.length : onCallTimes[0].key%colors.length]}\n                                                    horizontal\n                                                    style={{ marginTop: '1vh'}}\n                                                >\n                                                    {onCallTimes[0].text}\n                                                    {onCallTimes.filter(i => i.key !== onCallTimes[0].key).map(i => ' + ' + i.text)}\n                                                </Label>\n                                            )\n                                        }\n                                        return null\n                                    })}\n                                </Table.Cell>\n                                {\n                                    name === 'person' && (\n                                        <Table.Cell style={{ textAlign: 'center' }}>\n                                            {item.counter !== -1 && 'à la suite'}\n                                        </Table.Cell>\n                                    )\n                                }\n                                <Table.Cell>\n                                    {item.slots.map(slot => {\n                                        return(\n                                            <Label\n                                                key={slot}\n                                                color={slot === -1 ? 'purple' : colors[slot%colors.length]}\n                                                style={{ marginTop: '1vh'}}\n                                            >\n                                                {slot === -1 ? 'Tous les créneaux' : data.slots.find(e => e.key === slot)?.text}\n                                            </Label>\n                                        )\n                                    })}\n                                </Table.Cell>\n                                <Table.Cell>\n                                    {item.people.map(person => {\n                                        return(\n                                            <Label\n                                                key={person}\n                                                color={person === -1 ? 'teal' : colors[person%colors.length]}\n                                                style={{ marginTop: '1vh'}}\n                                            >\n                                                {person === -1 ? 'Tout le monde' : data.people.find(e => e.key === person).text}\n                                            </Label>\n                                        )\n                                    })}\n                                </Table.Cell>\n                                {/*\n                                <Table.Cell style={{ textAlign: 'center' }}>\n                                    <Label circular color={'red'}>\n                                        {item.exigency}\n                                    </Label>\n                                </Table.Cell>\n                                */}\n                                <Table.Cell style={{ textAlign: 'center' }}>\n                                    <Checkbox toggle checked={!item.disable} onChange={() => {\n                                        item.disable = !item.disable\n                                        setData({ ...data })\n                                    }} />\n                                </Table.Cell>\n                            </Table.Row>\n                        )\n                    }\n                </Table.Body>\n            </Table>\n            <Button positive onClick={() => handleOpenOnModal(modalSettings, setModalSettings)}>Ajouter une contrainte</Button>\n        </>\n    )\n}\n\nexport default RulesTable","import { Accordion, Container, Label } from 'semantic-ui-react'\nimport RulesTable from './RulesTable'\nimport _ from \"lodash\";\n\nconst RulesContainer = ({ data, setData }) => {\n    const containers = [\n        {title: 'Contraintes par créneau', content: <RulesTable name='slot' data={data} setData={setData} />},\n        {title: 'Contraintes par personne', content: <RulesTable name='person' data={data} setData={setData} />}\n    ]\n    const panels = _.times(containers.length, (i) => ({\n        key: `panel-${i}`,\n        title: {\n            content: <Label color='black' content={containers[i].title} />\n        },\n        content: {\n            content: containers[i].content\n        }\n    }))\n    return (\n        <Container>\n            <Accordion exclusive={false} panels={panels} />\n        </Container>\n    )\n}\n\nexport default RulesContainer","import React, { useState } from 'react'\nimport { Button, Confirm, Container, Divider, Icon, Input, Label, Menu, Modal } from 'semantic-ui-react'\nimport {\n    generatePlanning,\n    getCsvData,\n    importCsv,\n    importRules,\n    resetData,\n    resetDefaultData\n} from '../helpers/PlanningHelper'\nimport {\n    handleCloseResetConfirm,\n    handleCloseResetDefaultConfirm,\n    handleOpenResetConfirm,\n    handleOpenResetDefaultConfirm\n} from '../helpers/FormHelper'\nimport { CSVLink } from 'react-csv'\nimport exportFromJSON from 'export-from-json'\n\nconst MenuContainer = ({ data, setData }) => {\n    const [isImportOpen, setIsImportOpen] = useState(false)\n    const [isRuleOpen, setIsRuleOpen] = useState(false)\n    const [isResetOpen, setIsResetOpen] = useState(false)\n    const [selectedRuleFile, setSelectedRuleFile] = useState(null)\n    const [selectedFile, setSelectedFile] = useState(null);\n\n    return (\n        <Menu className=\"ui fixed inverted menu\">\n            <Container>\n                <Menu.Item header>\n                    Resplanning\n                </Menu.Item>\n                <Menu.Item onClick={() => generatePlanning({...data}, setData)}>\n                    <Button color='teal'>Génération Planning</Button>\n                </Menu.Item>\n                <Menu.Menu position='right'>\n                    <Menu.Item>\n                        <Button color='orange' onClick={() => setIsRuleOpen(true)}>\n                            Options Règles\n                        </Button>\n                        <Modal\n                            open={isRuleOpen}\n                            onClose={() => setIsRuleOpen(false)}\n                        >\n                            <Modal.Content>\n                                <Label\n                                    color='olive'\n                                    onClick={()  => exportFromJSON({\n                                        data: {\n                                            onCallTimes: data.onCallTimes,\n                                            rulesByPerson: data.rulesByPerson,\n                                            rulesBySlot: data.rulesBySlot,\n                                            slots: data.slots,\n                                            slotCount: data.slotCount,\n                                            onCallTimesCount: data.onCallTimesCount,\n                                        },\n                                        fileName: 'resplanning-config',\n                                        exportType: exportFromJSON.types.json})\n                                    }\n                                    style={{ cursor: 'pointer'}}\n                                >Exporter les règles</Label>\n                                <Divider />\n                                  <label htmlFor=\"file\" style={{ cursor: 'pointer',fontWeight: 'bold', marginRight: '0.5vw' }}>\n                                    <Label color='violet'>Importer des règles</Label>\n                                </label>\n                                <Input\n                                    id='file'\n                                    type='file'\n                                    accept='.json'\n                                    onChange={(e) => setSelectedRuleFile(e.target.files[0])}\n                                    style={{ display: 'none' }}\n                                />\n                                { selectedRuleFile ? <Icon color='green' name='circle' /> : <Icon color='red' name='circle outline' />}\n                            </Modal.Content>\n                            <Modal.Actions>\n                                <Button color='red' onClick={() => setIsRuleOpen(false)}>Annuler</Button>\n                                <Button color='green' onClick={() => importRules(data, setData, selectedRuleFile, setSelectedRuleFile, setIsRuleOpen)}>Valider</Button>\n                            </Modal.Actions>\n                        </Modal>\n                    </Menu.Item>\n                    {/*\n                    <Menu.Item>\n                        <Button color='violet' onClick={() => setIsImportOpen(true)}>Importation Frama</Button>\n                        <Modal\n                            open={isImportOpen}\n                            onClose={() => {\n                                setSelectedFile(null)\n                                setIsImportOpen(false)\n                            }}\n                        >\n                            <Modal.Content style={{ textAlign: 'center' }}>\n                                <label htmlFor=\"file\" style={{ cursor: 'pointer',fontWeight: 'bold', marginRight: '0.5vw' }}>\n                                    <Label color='violet'>Upload un fichier</Label>\n                                </label>\n                                <Input\n                                    id='file'\n                                    type='file'\n                                    accept='.csv'\n                                    onChange={(e) => setSelectedFile(e.target.files[0])}\n                                    style={{ display: 'none' }}\n                                />\n                                { selectedFile ? <Icon color='green' name='circle' /> : <Icon color='red' name='circle outline' />}\n                            </Modal.Content>\n                            <Modal.Actions>\n                                <Button color='red' onClick={() => {\n                                    setSelectedFile(null)\n                                    setIsImportOpen(false)\n                                }}>Annuler</Button>\n                                <Button\n                                    color='green'\n                                    onClick={() => importCsv(data, setData, selectedFile, setSelectedFile, setIsImportOpen)}\n                                >\n                                    Valider\n                                </Button>\n                            </Modal.Actions>\n                        </Modal>\n                    </Menu.Item>\n                    */}\n                    <Menu.Item>\n                        <CSVLink data={getCsvData(data)} filename={\"planning.csv\"}>\n                            <Button color='brown'>Exportation Planning</Button>\n                        </CSVLink>\n                    </Menu.Item>\n                    <Menu.Item>\n                        <Button onClick={() => setIsResetOpen(true)} color='red'>Réinitialiser</Button>\n                        <Modal\n                            open={isResetOpen}\n                            onClose={() => setIsResetOpen(false)}\n                        >\n                            <Modal.Content>\n                                <Button onClick={() => handleOpenResetDefaultConfirm(data, setData)} color='orange'>Remettre les paramètres par défaut</Button>\n                                <Confirm\n                                    open={data.confirmResetDefaultOpen}\n                                    content='Es-tu sûr.e de vouloir remettre les paramètres par défaut de TOUTES les données de la page (permanences, règles, personnes...) ?'\n                                    onCancel={() => handleCloseResetDefaultConfirm(data, setData)}\n                                    onConfirm={() => {\n                                        resetDefaultData(data, setData)\n                                        setIsResetOpen(false)\n                                    }}\n                                />\n                                <Divider />\n                                <Button onClick={() => handleOpenResetConfirm(data, setData)} color='black'>Remise à zéro globale</Button>\n                                <Confirm\n                                    open={data.confirmResetOpen}\n                                    content='Es-tu sûr.e de vouloir remettre à zéro TOUTES les données de la page (permanences, règles, personnes...) ?'\n                                    onCancel={() => handleCloseResetConfirm(data, setData)}\n                                    onConfirm={() => {\n                                        resetData(data, setData)\n                                        setIsResetOpen(false)\n                                    }}\n                                />\n                            </Modal.Content>\n                            <Modal.Actions>\n                                <Button color='red' onClick={() => setIsResetOpen(false)}>Annuler</Button>\n                            </Modal.Actions>\n                        </Modal>\n                    </Menu.Item>\n                </Menu.Menu>\n            </Container>\n        </Menu>\n    )\n}\n\nexport default MenuContainer","import React from 'react'\nimport { Container, Item, Segment } from 'semantic-ui-react'\n\nconst Footer = () => (\n    <Segment className=\"ui inverted vertical segment\">\n        <Container textAlign='center'>\n            <p>Developpé par <Item as='a' href='mailto:maxime@famillevaillant.fr'>Maxime Vaillant</Item></p>\n        </Container>\n    </Segment>\n)\n\nexport default Footer","import { Accordion, Container, Dimmer, Label, Loader, Message, Modal } from 'semantic-ui-react'\nimport _ from 'lodash'\nimport OnCallTimeContainer from './components/UI/OnCallTimeContainer'\nimport AvailabilitiesContainer from './components/UI/AvailabilitiesContainer'\nimport PlanningContainer from './components/UI/PlanningContainer'\nimport usePlanning from './components/hooks/usePlanning'\nimport RulesContainer from './components/UI/RulesContainer'\nimport MenuContainer from './components/UI/MenuContainer'\nimport Footer from './components/UI/Footer'\n\nfunction App() {\n    const {\n        data,\n        setData\n    } = usePlanning()\n\n    const containers = [\n        {title: 'Permanences', content: <OnCallTimeContainer data={data} setData={setData} />},\n        {title: 'Contraintes', content: <RulesContainer data={data} setData={setData} />},\n        {title: 'Disponibilités', content: <AvailabilitiesContainer data={data} setData={setData} />},\n        {title: 'Planning', content: <PlanningContainer data={data} setData={setData} />},\n    ]\n\n    const panels = _.times(containers.length, (i) => ({\n        key: `panel-${i}`,\n        title: {\n            content: <Label basic color='black' size='massive' content={containers[i].title} />\n        },\n        content: {\n            content: containers[i].content\n        }\n    }))\n\n    return (\n        <>\n            <MenuContainer data={data} setData={setData}/>\n            <Container fluid style={{ paddingLeft: '3vw', paddingTop: '10vh', overflow: 'scroll', minHeight: '100vh' }}>\n\n                {\n                    data.loading &&\n                    (<Dimmer active page>\n                        <Loader size='massive'>Loading</Loader>\n                    </Dimmer>)\n                }\n                <Modal\n                    basic\n                    open={data.callback.error}\n                    onClose={() => {\n                        data.callback.error = false\n                        data.callback.message = { status: null, statusMsg: null }\n                        setData({...data})\n                    }}\n                >\n                    <Message negative>\n                        <Message.Header>\n                            {data.callback.message.status === 404 && 'Modèle introuvable'}\n                            {data.callback.message.status === 400 && 'Données invalides'}\n                            {data.callback.message.status === 409 && 'Erreur avec le solveur'}\n                            {data.callback.message.status === 500 && 'Erreur système'}\n                        </Message.Header>\n                        <Message.Content>\n                            {data.callback.message.status === 404 && 'Trop de contraintes liées aux règles ou manque de personnes'}\n                            {data.callback.message.status === 500 && 'Contactes le dev'}\n                        </Message.Content>\n                    </Message>\n                </Modal>\n                <Accordion\n                    panels={panels}\n                    exclusive={false}\n                    fluid\n                />\n            </Container>\n            <Footer />\n        </>\n\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}