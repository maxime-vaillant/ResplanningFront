{"version":3,"sources":["assets/Pic.js","components/hooks/usePlanning.js","components/helpers/PlanningHelper.js","components/UI/OnCallTimeContainer.js","components/UI/AvailabilitiesContainer.js","components/UI/PlanningContainer.js","components/hooks/useRulesForm.js","components/helpers/FormHelper.js","components/UI/RulesForm.js","components/hooks/useModalForm.js","components/UI/RulesTable.js","components/UI/RulesContainer.js","components/UI/MenuContainer.js","App.js","index.js"],"names":["rulesBySlot","rulesByPerson","onCallTimes","key","text","value","slots","usePlanning","useState","people","planning","callback","error","message","status","statusMsg","onCallTimeCount","length","slotCount","personCount","loading","confirmOpen","data","setData","colors","addSlot","forEach","addPerson","slot","removeSlot","slotId","filter","e","person","item","removePerson","personId","getOnCallTimeValue","onCallTime","find","getCsvData","csvData","push","csvRow","getIdsToSend","array","arrayTmp","generatePlanning","a","reqData","JSON","stringify","config","method","url","headers","axios","then","response","parse","console","log","catch","statusText","OnCallTimeContainer","map","Label","color","horizontal","style","marginTop","Icon","name","cursor","onClick","onCallTimeId","removeOnCallTime","initialValue","save","newOnCallTime","updateOnCallTimes","Popup","content","inverted","basic","trigger","addOnCallTimes","AvailabilitiesContainer","Table","celled","padded","Header","Row","textAlign","HeaderCell","singleLine","width","newSlot","updateSlots","Cell","Button","circular","icon","Body","newPerson","normalize","replace","updatePeople","selectable","positive","negative","handleChangeOnAvailabilities","PlanningContainer","Group","Dropdown","clearable","className","placeholder","fluid","options","onChange","i","datas","handleChangeOnPlanning","selection","resetPlanning","useRulesForm","ruleName","ruleId","existingRule","param","counter","on_call_times","exigency","disable","rule","setRule","filteredPeopleChoice","concat","includes","filteredSlotsChoice","onCallTimesChoice","String","peopleChoice","slotsChoice","formData","setFormData","handleCloseOnModal","modalSettings","setModalSettings","isOpen","RulesForm","onCallTimesChosen","peopleChosen","slotsChosen","Container","Grid","columns","Column","newMethod","handleChangeOnMethod","Input","min","newValue","parseInt","handleChangeOnParam","type","id","removeOnCallTimeInRule","sort","addOnCallTimeInRule","removeSlotInRule","addSlotInRule","removePersonInRule","addPersonInRule","handleChangeOnCounter","Divider","rules","submitForm","useModalForm","RulesTable","columnsName","Modal","open","onClose","Content","index","removeRule","handleEditRule","itm","split","isEmpty","reduce","s","Checkbox","toggle","checked","handleOpenOnModal","RulesContainer","containers","title","panels","_","times","Accordion","exclusive","MenuContainer","Menu","Item","header","position","filename","handleOpenConfirm","Confirm","onCancel","handleCloseConfirm","onConfirm","resetData","App","size","paddingLeft","paddingTop","overflow","minHeight","Dimmer","active","page","Loader","Message","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ca09846d.chunk.js","sourcesContent":["export const rulesBySlot = [\n    {\n        \"method\": \"exact\",\n        \"param\": 2,\n        \"counter\": -1,\n        \"slots\": [-1],\n        \"people\": [-1],\n        \"on_call_times\": [\"0\", \"1\"],\n        \"exigency\": 0,\n        \"disable\": false\n    },\n    {\n        \"method\": \"at_most\",\n        \"param\": 1,\n        \"counter\": -1,\n        \"slots\": [0, 1, 2, 3, 4, 5, 6, 7],\n        \"people\": [-1],\n        \"exigency\": 0,\n        \"on_call_times\": [\"3\"],\n        \"disable\": true\n    },\n    {\n        \"method\": \"at_least\",\n        \"param\": 3,\n        \"counter\": -1,\n        \"slots\": [0, 1, 2, 3, 4, 5, 6, 7],\n        \"people\": [-1],\n        \"exigency\": 0,\n        \"on_call_times\": [\"2\"],\n        \"disable\": true\n    },\n    {\n        \"method\": \"at_most\",\n        \"param\": 6,\n        \"counter\": -1,\n        \"slots\": [0, 1, 2, 3, 4, 5, 6, 7],\n        \"people\": [-1],\n        \"exigency\": 0,\n        \"on_call_times\": [\"2\"],\n        \"disable\": true\n    },\n    {\n        \"method\": \"exact\",\n        \"param\": 0,\n        \"counter\": -1,\n        \"slots\": [0, 1, 2, 3, 4, 5, 6, 7],\n        \"people\": [-1],\n        \"exigency\": 0,\n        \"on_call_times\": [\"4\", \"5\"],\n        \"disable\": true\n    },\n    {\n        \"method\": \"exact\",\n        \"param\": 0,\n        \"counter\": -1,\n        \"slots\": [8, 9],\n        \"people\": [-1],\n        \"exigency\": 0,\n        \"on_call_times\": [\"2\", \"6\", \"3\"],\n        \"disable\": true\n    },\n    {\n        \"method\": \"at_most\",\n        \"param\": 3,\n        \"counter\": -1,\n        \"slots\": [8, 9],\n        \"people\": [-1],\n        \"exigency\": 0,\n        \"on_call_times\": [\"5\"],\n        \"disable\": true\n    },\n]\n\nexport const rulesByPerson = [\n    {\n        \"method\": \"at_most\",\n        \"param\": 2,\n        \"counter\": -1,\n        \"slots\": [-1],\n        \"people\": [-1],\n        \"on_call_times\": [\"0\", \"1\"],\n        \"exigency\": 0,\n        \"disable\":  true\n    },\n    {\n        \"method\": \"at_most\",\n        \"param\": 3,\n        \"counter\": -1,\n        \"slots\": [-1],\n        \"people\": [-1],\n        \"on_call_times\": [\"0+1\"],\n        \"exigency\": 0,\n        \"disable\":  true\n    },\n    {\n        \"method\": \"at_most\",\n        \"param\": 1,\n        \"counter\": 2,\n        \"slots\": [-1],\n        \"people\": [-1],\n        \"on_call_times\": [\"0+1\", \"6\"],\n        \"exigency\": 0,\n        \"disable\":  true\n    },\n    {\n        \"method\": \"at_most\",\n        \"param\": 2,\n        \"counter\": 3,\n        \"slots\": [-1],\n        \"people\": [-1],\n        \"on_call_times\": [\"2\"],\n        \"exigency\": 0,\n        \"disable\":  true\n    }\n]\n\nexport const onCallTimes = [\n    {\n        key: 0,\n        text: \"Sécu pente\",\n        value: 0\n    },\n    {\n        key: 1,\n        text: \"Sécu escalier\",\n        value: 1\n    },\n    {\n        key: 2,\n        text: \"Bar\",\n        value: 2\n    },\n    {\n        key: 3,\n        text: \"Caisse\",\n        value: 3\n    },\n    {\n        key: 4,\n        text: \"Ménage\",\n        value: 4\n    },\n    {\n        key: 5,\n        text: \"Sécu trottoir\",\n        value: 5\n    },\n    {\n        key: 6,\n        text: \"Pause\",\n        value: 6\n    }\n]\n\nexport const slots = [\n    {\n        key: 0,\n        text: \"18h00\"\n    },\n    {\n        key: 1,\n        text: \"18h30\"\n    },\n    {\n        key: 2,\n        text: \"19h00\"\n    },\n    {\n        key: 3,\n        text: \"19h30\"\n    },\n    {\n        key: 4,\n        text: \"20h00\"\n    },\n    {\n        key: 5,\n        text: \"20h30\"\n    },\n    {\n        key: 6,\n        text: \"21h00\"\n    },\n    {\n        key: 7,\n        text: \"21h30\"\n    },\n    {\n        key: 8,\n        text: \"22h00\"\n    },\n    {\n        key: 9,\n        text: \"22h30\"\n    },\n]","import { useState } from 'react'\nimport {onCallTimes, rulesByPerson, rulesBySlot, slots} from \"../../assets/Pic\";\n\nconst usePlanning = () => {\n    const colors = ['red', 'orange', 'yellow', 'olive', 'green', 'teal', 'blue', 'violet', 'purple', 'pink', 'brown']\n\n    const [data, setData] = useState({\n        slots: slots,\n        people: [],\n        onCallTimes: onCallTimes,\n        rulesByPerson: rulesByPerson,\n        rulesBySlot: rulesBySlot,\n        planning: {},\n        callback: {\n            error: false,\n            message: { status: null, statusMsg: null }\n        },\n        onCallTimeCount: onCallTimes.length,\n        slotCount: slots.length,\n        personCount: 0,\n        loading: false,\n        confirmOpen: false\n    })\n\n    return {\n        data,\n        setData,\n        colors\n    }\n}\n\nexport default usePlanning","import axios from \"axios\";\n\nexport const addSlot = (data, setData) => {\n    data.slots = [...data.slots, {key: data.slotCount, text: '00h00'}]\n    data.people.forEach(({ key }) =>\n        data.planning[key][data.slotCount] = null\n    )\n    data.slotCount += 1\n    setData({...data})\n}\n\nexport const addPerson = (data, setData) => {\n    data.people = [...data.people, {key: data.personCount, text: 'Personne'}]\n    data.planning[data.personCount] = {}\n    data.slots.forEach(slot => {\n        data.planning[data.personCount][slot.key] = null\n    })\n    data.personCount += 1\n    setData({...data})\n}\n\nexport const addOnCallTimes = (data, setData) => {\n    data.onCallTimes = [...data.onCallTimes, {key: data.onCallTimeCount, text: 'Perm', value: data.onCallTimeCount}]\n    data.onCallTimeCount += 1\n    setData({...data})\n}\n\nexport const removeSlot = (data, setData, slotId) => {\n    data.slots = data.slots.filter(e  => e.key !== slotId)\n    data.people.forEach(person =>\n        delete data.planning[person.key][slotId]\n    )\n    data.rulesBySlot.forEach(item =>\n        item.slots = item.slots.filter(e => e !== slotId)\n    )\n    data.rulesByPerson.forEach(item =>\n        item.people = item.people.filter(e => e !== slotId)\n    )\n    setData({...data})\n}\n\nexport const removePerson = (data, setData, personId) => {\n    data.people = data.people.filter(e => e.key !== personId)\n    delete data.planning[personId]\n    data.rulesBySlot.forEach(item =>\n        item.slots = item.slots.filter(e => e !== personId)\n    )\n    data.rulesByPerson.forEach(item =>\n        item.people = item.people.filter(e => e !== personId)\n    )\n    setData({...data})\n}\n\nexport const removeOnCallTime = (data, setData, onCallTimeId) => {\n    data.onCallTimes = data.onCallTimes.filter(e => e.key !== onCallTimeId)\n    data.people.forEach(person  => {\n        data.slots.forEach(slot  => {\n            if (slot.key in data.planning[person.key] && data.planning[person.key][slot.key] === onCallTimeId){\n                data.planning[person.key][slot.key] = null\n            }\n        })\n    })\n    setData({...data})\n}\n\nexport const removeRule = (rule, data, setData, index) => {\n    if (rule === 'slot'){\n        data.rulesBySlot = data.rulesBySlot.filter((e, i) => i !== index)\n    } else if  (rule === 'person'){\n        data.rulesByPerson = data.rulesByPerson.filter((e, i) => i !== index)\n    }\n    setData({ ...data })\n}\n\nexport const updateSlots = (data, setData, newSlot, slotId) => {\n    data.slots.find(e => e.key === slotId).text = newSlot\n    setData({...data})\n}\n\nexport const updatePeople = (data, setData, newPerson, personId) => {\n    data.people.find(e => e.key === personId).text = newPerson.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")\n    setData({...data})\n}\n\nexport const updateOnCallTimes = (data, setData, newOnCallTime, onCallTimeId) => {\n    data.onCallTimes.find(e => e.key === onCallTimeId).text = newOnCallTime\n    setData({...data})\n}\n\nexport const handleChangeOnAvailabilities = (data, setData, personId, slotId) => {\n    if (slotId in data.planning[personId]){\n        delete data.planning[personId][slotId]\n    } else {\n        data.planning[personId][slotId] = null\n    }\n    setData({...data})\n}\n\nexport const handleChangeOnPlanning = (data, setData, value, personId, slotId) => {\n    data.planning[personId][slotId] = value !== '' ? data.onCallTimes.find(e => e.value === value).key : null\n    setData({...data})\n}\n\nexport const getOnCallTimeValue = (data,  personId, slotId) => {\n    let key = null\n    if (slotId in data.planning[personId]){\n        key = data.planning[personId][slotId]\n    }\n    if (key !== null) {\n        const onCallTime = data.onCallTimes.find(e => e.key === key)\n        if (onCallTime) {\n            return onCallTime.value\n        }\n    }\n    return null\n}\n\nexport const getCsvData = (data) => {\n    const csvData = [['Personnes']]\n    data.slots.forEach(slot => {\n        csvData[0].push(slot.text)\n    })\n    data.people.forEach(person => {\n        const csvRow = [data.people.find(e => e.key === person.key).text]\n        data.slots.forEach(slot => {\n            let key = null\n            if (slot.key in data.planning[person.key]){\n                key = data.planning[person.key][slot.key]\n            }\n            csvRow.push(key !== null ? data.onCallTimes.find(e => e.key === key).text : null)\n        })\n        csvData.push(csvRow)\n    })\n    return csvData\n}\n\nexport const resetData = (data, setData) => {\n    data = {\n        slots: [],\n        people: [],\n        onCallTimes: [],\n        rulesByPerson: [],\n        rulesBySlot: [],\n        planning: {},\n        callback: {\n            error: false,\n            message: { status: null, statusMsg: null }\n        },\n        onCallTimeCount: 0,\n        slotCount: 0,\n        personCount: 0,\n        loading: false\n    }\n    setData({...data})\n}\n\nexport const resetPlanning = (data, setData) => {\n    data.people.forEach(person => {\n        data.slots.forEach(slot => {\n            if (slot.key in data.planning[person.key]){\n                data.planning[person.key][slot.key] = null\n            }\n        })\n    })\n    setData({...data})\n}\n\nconst getIdsToSend = (array) => {\n    const arrayTmp = []\n    array.forEach(e => arrayTmp.push(e.key))\n    return arrayTmp\n}\n\nexport const generatePlanning = async (data, setData) => {\n    data.loading = true\n    setData({...data})\n    const reqData = JSON.stringify({\n        \"planning\": data.planning,\n        \"on_call_times\": getIdsToSend(data.onCallTimes),\n        \"slots\": getIdsToSend(data.slots),\n        \"people\": getIdsToSend(data.people),\n        \"rules_by_person\": data.rulesByPerson,\n        \"rules_by_slot\": data.rulesBySlot\n    })\n    const config = {\n        method: 'POST',\n        url: 'https://resplanning-back.herokuapp.com/generate/',\n        // url: 'http://localhost:8000/generate/',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        data : reqData\n    }\n    await axios(config)\n        .then(function (response) {\n            data.planning = JSON.parse(JSON.stringify(response.data.planning))\n            data.loading = false\n            setData({...data})\n            console.log(data.planning)\n        })\n        .catch(function (error) {\n            data.callback.error = true\n            data.callback.message = { status: error.response.status, statusMsg: error.response.statusText }\n            data.loading = false\n            setData({...data})\n        });\n}","import usePlanning from '../hooks/usePlanning'\nimport {Icon, Label, Popup} from 'semantic-ui-react'\nimport EditableLabel from 'react-editable-label'\nimport {addOnCallTimes, removeOnCallTime, updateOnCallTimes} from '../helpers/PlanningHelper';\n\nconst OnCallTimeContainer = ({ data, setData }) => {\n    const {\n        colors\n    } = usePlanning()\n\n    return (\n        <>\n            {\n                data.onCallTimes.map(\n                    onCallTime =>\n                        <Label key={onCallTime.key} color={colors[onCallTime.key]} horizontal style={{ marginTop: '1vh'}}>\n                            <Icon\n                                name='remove'\n                                style={{ cursor: 'pointer' }}\n                                onClick={() => removeOnCallTime(data, setData, onCallTime.key)}\n                            />\n                            <EditableLabel\n                                initialValue={onCallTime.text}\n                                save={value => updateOnCallTimes(data, setData, value, onCallTime.key)}\n                            />\n                        </Label>\n                )\n            }\n            <Popup content='Ajouter une permanence' inverted basic trigger={\n                <Icon\n                    color='green'\n                    name='add'\n                    style={{ cursor: 'pointer' }}\n                    onClick={() => addOnCallTimes(data, setData)}\n                />\n            } />\n        </>\n    )\n}\n\nexport default OnCallTimeContainer","import { Button, Icon, Table } from 'semantic-ui-react'\nimport EditableLabel from 'react-editable-label'\nimport {\n    addPerson,\n    addSlot,\n    handleChangeOnAvailabilities,\n    removePerson, removeSlot,\n    updatePeople,\n    updateSlots\n} from \"../helpers/PlanningHelper\";\n\nconst AvailabilitiesContainer = ({ data, setData }) => {\n    return (\n        <>\n            <Table celled padded color='green'>\n                <Table.Header>\n                    <Table.Row textAlign='center'>\n                        <Table.HeaderCell singleLine width={4}>\n                            Personnes\n                        </Table.HeaderCell>\n                        {\n                            data.slots.map(slot =>\n                                <Table.HeaderCell singleLine key={slot.key}>\n                                    <Icon\n                                        color='red'\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removeSlot(data, setData, slot.key)}\n                                    />\n                                    <EditableLabel\n                                        initialValue={slot.text}\n                                        save={value => updateSlots(data, setData, value, slot.key)}\n                                    />\n                                </Table.HeaderCell>\n                            )\n                        }\n                        <Table.Cell>\n                            <Button\n                                circular\n                                color='green'\n                                icon='add'\n                                onClick={() => addSlot(data, setData)}\n                            />\n                        </Table.Cell>\n                        <Table.Cell>\n                            <Button\n                                circular\n                                color='green'\n                                icon='add'\n                                onClick={() => addSlot(data, setData)}\n                            />\n                        </Table.Cell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                    {\n                        data.people.map(person =>\n                            <Table.Row key={person.key}>\n                                <Table.Cell singleLine textAlign='center'>\n                                    <Icon\n                                        color='red'\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removePerson(data, setData, person.key)}\n                                    />\n                                    <EditableLabel\n                                        initialValue={person.text}\n                                        save={value => updatePeople(data, setData, value, person.key)}\n                                    />\n                                </Table.Cell>\n                                {\n                                    data.slots.map(slot =>\n                                        <Table.Cell\n                                            selectable\n                                            positive={slot.key in data.planning[person.key]}\n                                            negative={!(slot.key in data.planning[person.key])}\n                                            onClick={() => {\n                                                handleChangeOnAvailabilities(data, setData, person.key, slot.key)\n                                            }}\n                                            key={person+slot+person.key+slot.key}\n                                        />\n                                    )\n                                }\n                            </Table.Row>\n                        )\n                    }\n                </Table.Body>\n            </Table>\n            <Button color='green' onClick={() => {addPerson(data, setData)}}>\n                Ajouter une personne\n            </Button>\n        </>\n    )\n}\n\nexport default AvailabilitiesContainer","import { Button, Dropdown, Icon, Table } from 'semantic-ui-react'\nimport {\n    addPerson,\n    addSlot,\n    getOnCallTimeValue,\n    handleChangeOnPlanning,\n    removePerson,\n    removeSlot, resetPlanning\n} from '../helpers/PlanningHelper'\nimport usePlanning from \"../hooks/usePlanning\";\n\nconst PlanningContainer = ({ data, setData }) => {\n    const {\n        colors\n    } = usePlanning()\n\n    return (\n        <>\n            <b>Pense à vider le planning si tu veux en générer un nouveau</b>\n            <Table celled padded color='green'>\n                <Table.Header>\n                    <Table.Row textAlign='center'>\n                        <Table.HeaderCell singleLine width={4}>\n                            Personnes\n                        </Table.HeaderCell>\n                        {\n                            data.slots.map(slot =>\n                                <Table.HeaderCell singleLine key={slot.key}>\n                                    <Icon\n                                        color='red'\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removeSlot(data, setData, slot.key)}\n                                    />\n                                    {slot.text}\n                                </Table.HeaderCell>\n                            )\n                        }\n                        <Table.Cell>\n                            <Button\n                                circular\n                                color='green'\n                                icon='add'\n                                onClick={() => addSlot(data, setData)}\n                            />\n                        </Table.Cell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                    {\n                        data.people.map(person =>\n                            <Table.Row key={person.key}>\n                                <Table.Cell singleLine textAlign='center'>\n                                    <Icon\n                                        color='red'\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removePerson(data, setData, person.key)}\n                                    />\n                                    {person.text}\n                                </Table.Cell>\n                                {\n                                    data.slots.map(slot =>\n                                        <Table.Cell singleLine key={person+slot+person.key+slot.key}>\n                                            {\n                                                slot.key in data.planning[person.key] ?\n                                                    <Button.Group\n                                                        color={\n                                                            getOnCallTimeValue(data, person.key, slot.key) !== null ?\n                                                                colors[getOnCallTimeValue(data, person.key, slot.key)%colors.length] :\n                                                                null\n                                                        }\n                                                    >\n                                                        <Dropdown\n                                                            clearable\n                                                            className='button'\n                                                            placeholder='Perm'\n                                                            fluid\n                                                            value={ getOnCallTimeValue(data, person.key, slot.key) }\n                                                            options={data.onCallTimes}\n                                                            onChange={(i, datas) => {\n                                                                handleChangeOnPlanning(data, setData, datas.value, person.key, slot.key)\n                                                            }}\n                                                            selection\n                                                            style={{ width: '100%' }}\n                                                        />\n                                                    </Button.Group>\n                                                     :\n                                                    null\n                                            }\n                                        </Table.Cell>\n                                    )\n                                }\n                            </Table.Row>\n                        )\n                    }\n                </Table.Body>\n            </Table>\n            <Button color='green' onClick={() => {addPerson(data, setData)}}>\n                Ajouter une personne\n            </Button>\n            <Button color='red' onClick={() => resetPlanning(data, setData)}>Vider</Button>\n        </>\n    )\n}\n\nexport default PlanningContainer","import { useState } from 'react'\n\nconst useRulesForm = (data, ruleName, ruleId) => {\n    const {\n        onCallTimes,\n        people,\n        slots,\n        rulesBySlot,\n        rulesByPerson\n    } = data\n\n    const existingRule = ruleName === 'slot' ?\n        rulesBySlot[ruleId] :\n        rulesByPerson[ruleId]\n\n    const [rule, setRule] = useState(existingRule ? {...existingRule} : {\n        method: \"exact\",\n        param: 0,\n        counter: -1,\n        slots: [],\n        people: [],\n        on_call_times: [],\n        exigency: 0,\n        disable: false\n    })\n\n    const filteredPeopleChoice = rule.people[0] !== -1 ?\n        [{key: -1, text: 'Tout le monde', value: -1}].concat(people.filter(({ key }) => !rule.people.includes(key))) :\n        []\n\n    const filteredSlotsChoice = rule.slots[0] !== -1 ?\n        [{key: -1, text: 'Tous les créneaux', value: -1}].concat(slots.filter(({ key }) => !rule.slots.includes(key))) :\n        []\n\n    const [formData, setFormData] = useState({\n        onCallTimesChoice: onCallTimes.filter(({ key }) => !rule.on_call_times.includes(String(key))),\n        peopleChoice: filteredPeopleChoice,\n        slotsChoice: filteredSlotsChoice,\n    })\n\n    return {\n        rule,\n        setRule,\n        formData,\n        setFormData\n    }\n}\n\nexport default useRulesForm","export const handleChangeOnMethod = (rule, setRule, newMethod) => {\n    rule.method = newMethod ? newMethod : 'exact'\n    setRule({...rule})\n}\n\nexport const handleChangeOnParam = (rule, setRule, newValue) => {\n    rule.param = parseInt(newValue)\n    setRule({...rule})\n}\n\nexport const handleChangeOnCounter = (rule, setRule, newValue) => {\n    rule.counter = parseInt(newValue)\n    setRule({...rule})\n}\n\nexport const addOnCallTimeInRule = (rule, setRule, formData, setFormData, onCallTimeId) => {\n    rule.on_call_times = [...rule.on_call_times, String(onCallTimeId)].sort()\n    formData.onCallTimesChoice = formData.onCallTimesChoice.filter(({ key }) => key !== onCallTimeId)\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const addSlotInRule = (rule, setRule, formData, setFormData, slotId) => {\n    rule.slots = slotId === -1 ? [slotId] : [...rule.slots, slotId].sort()\n    formData.slotsChoice = slotId === -1 ? [] : formData.slotsChoice.filter(({ key }) => key !== slotId)\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const addPersonInRule = (rule, setRule, formData, setFormData, personId) => {\n    rule.people = personId === -1 ? [personId] : [...rule.people, personId].sort()\n    formData.peopleChoice = personId === -1 ? [] : formData.peopleChoice.filter(({ key }) => key !== personId)\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const removeOnCallTimeInRule = (rule, setRule, formData, setFormData, data, onCallTimeId) => {\n    rule.on_call_times = rule.on_call_times.filter(id => id !== onCallTimeId)\n    formData.onCallTimesChoice = data.onCallTimes.filter(({ key }) => !rule.on_call_times.includes(String(key)))\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const removeSlotInRule = (rule, setRule, formData, setFormData, data, slotId) => {\n    rule.slots = rule.slots.filter(id => id !== slotId)\n    formData.slotsChoice = [{key: -1, text: 'Tous les créneaux', value: -1}].concat(\n        data.slots.filter(({ key }) => !rule.slots.includes(key))\n    )\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const removePersonInRule = (rule, setRule, formData, setFormData, data, personId) => {\n    rule.people = rule.people.filter(id => id !== personId)\n    formData.peopleChoice = [{key: -1, text: 'Tout le monde', value: -1}].concat(\n        data.people.filter(({ key }) => !formData.rule.people.includes(key))\n    )\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const handleOpenConfirm = (data, setData) => {\n    data.confirmOpen = true\n    setData({...data})\n}\n\nexport const handleCloseConfirm = (data, setData) => {\n    data.confirmOpen = false\n    setData({...data})\n}\n\nexport const handleCloseOnModal = (modalSettings, setModalSettings) => {\n    modalSettings.isOpen = false\n    setModalSettings({...modalSettings})\n}\n\nexport const handleOpenOnModal = (modalSettings, setModalSettings) => {\n    modalSettings.isOpen = true\n    modalSettings.ruleId = null\n    setModalSettings({...modalSettings})\n}\n\nexport const handleEditRule = (modalSettings, setModalSettings, id) => {\n    modalSettings.isOpen = true\n    modalSettings.ruleId = id\n    setModalSettings({...modalSettings})\n}\n\nexport const submitForm = (modalSettings, setModalSettings, rule, ruleName, ruleId, data, setData) => {\n    const {\n        rulesBySlot,\n        rulesByPerson\n    } = data\n\n    const rules = ruleName === 'slot' ?\n        rulesBySlot :\n        rulesByPerson\n\n    if ( rules[ruleId] ) {\n        rules[ruleId] = rule\n    } else {\n        rules.push(rule)\n    }\n\n    setData({...data})\n    modalSettings.isOpen = false\n    setModalSettings({...modalSettings})\n}","import {Button, Container, Divider, Dropdown, Grid, Icon, Input, Label} from 'semantic-ui-react'\nimport usePlanning from '../hooks/usePlanning'\nimport useRulesForm from '../hooks/useRulesForm'\nimport {\n    addOnCallTimeInRule,\n    addPersonInRule,\n    addSlotInRule, handleChangeOnCounter, handleChangeOnMethod, handleChangeOnParam, handleCloseOnModal,\n    removeOnCallTimeInRule, removePersonInRule,\n    removeSlotInRule, submitForm\n} from \"../helpers/FormHelper\";\n\nconst RulesForm = ({ modalSettings, setModalSettings, ruleName, ruleId, data, setData }) => {\n    const {\n        rule,\n        setRule,\n        formData,\n        setFormData\n    } = useRulesForm(data, ruleName, ruleId)\n\n    const {\n        onCallTimes,\n        people,\n        slots\n    } = data\n\n    const {\n        onCallTimesChoice,\n        peopleChoice,\n        slotsChoice,\n    } = formData\n\n    const {\n        on_call_times: onCallTimesChosen,\n        people: peopleChosen,\n        slots: slotsChosen\n    } = rule\n\n    const {\n        colors\n    } = usePlanning()\n\n    const methodOptions = [\n        { key: 'exact', value: 'exact', text: 'Exactement'},\n        { key: 'at_least', value: 'at_least', text: 'Au moins'},\n        { key: 'at_most', value: 'at_most', text: 'Au plus'},\n    ]\n\n    return(\n        <Container>\n            <Grid>\n                <Grid.Row columns={4}>\n                    <Grid.Column>\n                        <h3>Méthode :</h3>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Dropdown\n                            clearable={rule.method !== 'exact'}\n                            value={rule.method}\n                            selection\n                            onChange={(i, datas) => handleChangeOnMethod(rule, setRule, datas.value)}\n                            options={methodOptions}\n                        />\n                    </Grid.Column>\n                    <Grid.Column>\n                        <h3>Paramètre :</h3>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Input\n                            value={rule.param}\n                            min={0}\n                            onChange={(i, datas) => handleChangeOnParam(rule, setRule, datas.value)}\n                            type='number'\n                        />\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row columns={2}>\n                    <Grid.Column>\n                        <h3>Permanences :</h3>\n                    </Grid.Column>\n                    <Grid.Column>\n                        {\n                            onCallTimesChosen.map(onCallTimeId =>\n                                <Label\n                                    key={onCallTimeId}\n                                    color={colors[onCallTimeId%colors.length]}\n                                    style={{ marginTop: '0.5vh'}}\n                                >\n                                    <Icon\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removeOnCallTimeInRule(rule, setRule, formData, setFormData, data, onCallTimeId)}\n                                    />\n                                    {onCallTimes.find(({ key }) => key === parseInt(onCallTimeId)).text}\n                                </Label>\n                            )\n                        }\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    {\n                        onCallTimesChoice.map(({ key, text }) =>\n                            <Label\n                                horizontal\n                                key={key}\n                                color={colors[key%colors.length]}\n                                style={{ cursor: 'pointer', marginTop: '0.5vh' }}\n                                onClick={() => addOnCallTimeInRule(rule, setRule, formData, setFormData, key)}\n                            >\n                                {text}\n                            </Label>\n                        )\n                    }\n                </Grid.Row>\n                <Grid.Row columns={2}>\n                    <Grid.Column>\n                        <h3>Créneaux :</h3>\n                    </Grid.Column>\n                    <Grid.Column>\n                        {\n                            slotsChosen.map(slot =>\n                                <Label\n                                    horizontal\n                                    key={slot}\n                                    color={slot === -1 ? 'purple' : colors[slot%colors.length]}\n                                    style={{ marginTop: '0.5vh'}}\n                                >\n                                    <Icon\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removeSlotInRule(rule, setRule, formData, setFormData, data, slot)}\n                                    />\n                                    {slot === -1 ? 'Tous les créneaux' : slots.find(({ key }) => key === slot).text}\n                                </Label>\n                            )\n                        }\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    {\n                        slotsChoice.map(({ key, text }) =>\n                            <Label\n                                key={key}\n                                color={key === -1 ? 'purple' : colors[key%colors.length]}\n                                style={{ cursor: 'pointer', marginTop: '0.5vh' }}\n                                onClick={() => addSlotInRule(rule, setRule, formData, setFormData, key)}\n                            >\n                                {text}\n                            </Label>\n                        )\n                    }\n                </Grid.Row>\n                <Grid.Row columns={2}>\n                    <Grid.Column>\n                        <h3>Personnes :</h3>\n                    </Grid.Column>\n                    <Grid.Column>\n                        {\n                            peopleChosen.map(person =>\n                                <Label\n                                    horizontal\n                                    key={person}\n                                    color={person === -1 ? 'teal' : colors[person%colors.length]}\n                                    style={{ marginTop: '0.5vh'}}\n                                >\n                                    <Icon\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removePersonInRule(rule, setRule, formData, setFormData, data, person)}\n                                    />\n                                    {person === -1 ? 'Tout le monde' : people.find(({ key }) => key === person).text}\n                                </Label>\n                            )\n                        }\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    {\n                        peopleChoice.map(({ key, text }) =>\n                            <Label\n                                key={key}\n                                color={key === -1 ? 'teal' : colors[key%colors.length]}\n                                style={{ cursor: 'pointer', marginTop: '0.5vh' }}\n                                onClick={() => addPersonInRule(rule, setRule, formData, setFormData, key)}\n                            >\n                                {text}\n                            </Label>\n                        )\n                    }\n                </Grid.Row>\n                { ruleName === 'person' &&\n                (<Grid.Row columns={4}>\n                    <Grid.Column>\n                        <h3>Lot :</h3>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Input\n                            value={rule.counter}\n                            min={-1}\n                            onChange={(i, datas) => handleChangeOnCounter(rule, setRule, datas.value)}\n                            type='number'\n                        />\n                    </Grid.Column>\n                </Grid.Row>)\n                }\n            </Grid>\n            <Divider />\n            <Button negative onClick={() => handleCloseOnModal(modalSettings, setModalSettings)}>Annuler</Button>\n            <Button positive onClick={() => submitForm(modalSettings, setModalSettings, rule, ruleName, ruleId, data, setData)}>Sauvegarder</Button>\n        </Container>\n    )\n}\n\nexport default RulesForm","import {useState} from 'react'\n\nconst useModalForm = () => {\n    const [modalSettings, setModalSettings] = useState({\n        isOpen: false,\n        ruleId: null\n    })\n\n    return {\n        modalSettings,\n        setModalSettings\n    }\n}\n\nexport default useModalForm","import {Button, Checkbox, Icon, Label, Modal, Table} from 'semantic-ui-react'\nimport usePlanning from '../hooks/usePlanning'\nimport { removeRule } from '../helpers/PlanningHelper'\nimport {isEmpty} from 'lodash'\nimport RulesForm from './RulesForm'\nimport {handleCloseOnModal, handleEditRule, handleOpenOnModal} from \"../helpers/FormHelper\";\nimport useModalForm from \"../hooks/useModalForm\";\n\nconst RulesTable = ({ name, data, setData }) => {\n    const {\n        colors\n    } = usePlanning()\n\n    const rules = name === 'slot' ? data.rulesBySlot : data.rulesByPerson\n\n    const {\n        modalSettings,\n        setModalSettings\n    } = useModalForm()\n\n    const columnsName = name === 'person' ?\n        ['', '', 'Méthode', 'Paramètre', 'Permanences', 'Créneaux', 'Personnes', 'Lot', 'Exigence', 'Actif'] :\n        ['', '', 'Méthode', 'Paramètre', 'Permanences', 'Créneaux', 'Personnes', 'Exigence', 'Actif']\n\n    return (\n        <>\n            <Modal\n                open={modalSettings.isOpen}\n                onClose={() => handleCloseOnModal(modalSettings, setModalSettings)}\n            >\n                <Modal.Header>Règle par {name === 'slot' ? 'créneau' : 'personne'}</Modal.Header>\n                <Modal.Content>\n                    <RulesForm\n                        modalSettings={modalSettings}\n                        setModalSettings={setModalSettings}\n                        ruleId={modalSettings.ruleId}\n                        ruleName={name}\n                        data={data}\n                        setData={setData}\n                    />\n                </Modal.Content>\n            </Modal>\n            <Table celled padded color='blue'>\n                <Table.Header>\n                    <Table.Row>\n                        {\n                            columnsName.map((item, index) =>\n                                <Table.HeaderCell key={index}>\n                                    {item}\n                                </Table.HeaderCell>\n                            )\n                        }\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {\n                        rules.map((item, index) =>\n                            <Table.Row key={item+index}>\n                                <Table.Cell style={{ textAlign: 'center' }}>\n                                    <Icon\n                                        color='red'\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removeRule(name, data, setData, index)}\n                                    />\n                                </Table.Cell>\n                                <Table.Cell style={{ textAlign: 'center' }}>\n                                    <Icon\n                                        color='blue'\n                                        name='edit'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => handleEditRule(modalSettings, setModalSettings, index)}\n                                    />\n                                </Table.Cell>\n                                <Table.Cell>\n                                    {item.method === 'at_least'  && 'Au moins'}\n                                    {item.method === 'at_most'  && 'Au plus'}\n                                    {item.method === 'exact'  && 'Exactement'}\n                                </Table.Cell>\n                                <Table.Cell style={{ textAlign: 'center' }}>\n                                    {item.param}\n                                </Table.Cell>\n                                <Table.Cell>\n                                    {item.on_call_times.map(itm => {\n                                        const onCallTimes = data.onCallTimes.filter(e => itm.split('+').map(i => (parseInt(i))).includes(e.key))\n                                        if (!isEmpty(onCallTimes)){\n                                            return (\n                                                <Label\n                                                    key={itm}\n                                                    color={colors[onCallTimes.length > 1 ? onCallTimes.reduce((s, a) => s + a.key, 0)*10%colors.length : onCallTimes[0].key%colors.length]}\n                                                    horizontal\n                                                    style={{ marginTop: '1vh'}}\n                                                >\n                                                    {onCallTimes[0].text}\n                                                    {onCallTimes.filter(i => i.key !== onCallTimes[0].key).map(i => ' + ' + i.text)}\n                                                </Label>\n                                            )\n                                        }\n                                        return null\n                                    })}\n                                </Table.Cell>\n                                <Table.Cell>\n                                    {item.slots.map(slot => {\n                                        return(\n                                            <Label\n                                                key={slot}\n                                                color={slot === -1 ? 'purple' : colors[slot%colors.length]}\n                                                style={{ marginTop: '1vh'}}\n                                            >\n                                                {slot === -1 ? 'Tous les créneaux' : data.slots.find(e => e.key === slot).text}\n                                            </Label>\n                                        )\n                                    })}\n                                </Table.Cell>\n                                <Table.Cell>\n                                    {item.people.map(person => {\n                                        return(\n                                            <Label\n                                                key={person}\n                                                color={person === -1 ? 'teal' : colors[person%colors.length]}\n                                                style={{ marginTop: '1vh'}}\n                                            >\n                                                {person === -1 ? 'Tout le monde' : data.people.find(e => e.key === person).text}\n                                            </Label>\n                                        )\n                                    })}\n                                </Table.Cell>\n                                {\n                                    name === 'person' && (\n                                        <Table.Cell style={{ textAlign: 'center' }}>\n                                            {\n                                                (item.counter === -1 && !isEmpty(item.people) && item.people[0] === -1 && 'Tous') ||\n                                                (item.counter === -1 && !isEmpty(item.people) && item.people[0] !== -1 && item.people.length) ||\n                                                (item.counter === -1 && isEmpty(item.people) && 0) ||\n                                                (item.counter !== -1 && item.counter)\n                                            }\n                                        </Table.Cell>\n                                    )\n                                }\n                                <Table.Cell style={{ textAlign: 'center' }}>\n                                    <Label circular color={'red'}>\n                                        {item.exigency}\n                                    </Label>\n                                </Table.Cell>\n                                <Table.Cell style={{ textAlign: 'center' }}>\n                                    <Checkbox toggle checked={!item.disable} onChange={() => {\n                                        item.disable = !item.disable\n                                        setData({ ...data })\n                                    }} />\n                                </Table.Cell>\n                            </Table.Row>\n                        )\n                    }\n                </Table.Body>\n            </Table>\n            <Button positive onClick={() => handleOpenOnModal(modalSettings, setModalSettings)}>Ajouter une règle</Button>\n        </>\n    )\n}\n\nexport default RulesTable","import { Accordion, Container, Label } from 'semantic-ui-react'\nimport RulesTable from './RulesTable'\nimport _ from \"lodash\";\n\nconst RulesContainer = ({ data, setData }) => {\n    const containers = [\n        {title: 'Règles par créneau', content: <RulesTable name='slot' data={data} setData={setData} />},\n        {title: 'Règles par personne', content: <RulesTable name='person' data={data} setData={setData} />}\n    ]\n    const panels = _.times(containers.length, (i) => ({\n        key: `panel-${i}`,\n        title: {\n            content: <Label color='black' content={containers[i].title} />\n        },\n        content: {\n            content: containers[i].content\n        }\n    }))\n    return (\n        <Container>\n            <Accordion exclusive={false} panels={panels} />\n        </Container>\n    )\n}\n\nexport default RulesContainer","import {Button, Confirm, Container, Menu} from \"semantic-ui-react\";\nimport {generatePlanning, getCsvData, resetData} from \"../helpers/PlanningHelper\";\nimport {CSVLink} from \"react-csv\";\nimport {handleCloseConfirm, handleOpenConfirm} from \"../helpers/FormHelper\";\n\nconst MenuContainer = ({ data, setData }) => {\n    return (\n        <Menu className=\"ui fixed inverted menu\">\n            <Container>\n                <Menu.Item header>\n                    Resplanning\n                </Menu.Item>\n                <Menu.Item onClick={() => generatePlanning({...data}, setData)}>\n                    <Button color='teal'>Génération Planning</Button>\n                </Menu.Item>\n                <Menu.Menu position='right'>\n                    <Menu.Item>\n                        <CSVLink data={getCsvData(data)} filename={\"planning.csv\"}>\n                            <Button color='green'>Exportation Planning</Button>\n                        </CSVLink>\n                    </Menu.Item>\n                    <Menu.Item>\n                        <Button onClick={() => handleOpenConfirm(data, setData)} color='red'>Remise à zéro</Button>\n                        <Confirm\n                            open={data.confirmOpen}\n                            content='Es-tu sûr.e de vouloir remettre à zéro TOUTES les données de la page (permanences, règles, personnes...) ?'\n                            onCancel={() => handleCloseConfirm(data,  setData)}\n                            onConfirm={() => resetData(data, setData)}\n                        />\n                    </Menu.Item>\n                </Menu.Menu>\n            </Container>\n        </Menu>\n    )\n}\n\nexport default MenuContainer","import {Accordion, Container, Dimmer, Label, Loader, Message, Modal} from 'semantic-ui-react'\nimport _ from 'lodash'\nimport OnCallTimeContainer from './components/UI/OnCallTimeContainer'\nimport AvailabilitiesContainer from './components/UI/AvailabilitiesContainer'\nimport PlanningContainer from './components/UI/PlanningContainer'\nimport usePlanning from './components/hooks/usePlanning'\nimport RulesContainer from './components/UI/RulesContainer'\nimport MenuContainer from \"./components/UI/MenuContainer\";\n\nfunction App() {\n    const {\n        data,\n        setData\n    } = usePlanning()\n\n    const containers = [\n        {title: 'Permanences', content: <OnCallTimeContainer data={data} setData={setData} />},\n        {title: 'Règles', content: <RulesContainer data={data} setData={setData} />},\n        {title: 'Disponibilités', content: <AvailabilitiesContainer data={data} setData={setData} />},\n        {title: 'Planning', content: <PlanningContainer data={data} setData={setData} />},\n    ]\n\n    const panels = _.times(containers.length, (i) => ({\n        key: `panel-${i}`,\n        title: {\n            content: <Label basic color='black' size='massive' content={containers[i].title} />\n        },\n        content: {\n            content: containers[i].content\n        }\n    }))\n\n    return (\n        <>\n            <MenuContainer data={data} setData={setData}/>\n            <Container fluid style={{ paddingLeft: '3vw', paddingTop: '10vh', overflow: 'scroll', minHeight: '100vh' }}>\n\n                {\n                    data.loading &&\n                    (<Dimmer active page>\n                        <Loader size='massive'>Loading</Loader>\n                    </Dimmer>)\n                }\n                <Modal\n                    basic\n                    open={data.callback.error}\n                    onClose={() => {\n                        data.callback.error = false\n                        data.callback.message = { status: null, statusMsg: null }\n                        setData({...data})\n                    }}\n                >\n                    <Message negative>\n                        <Message.Header>\n                            {data.callback.message.status === 404 && 'Modèle introuvable'}\n                            {data.callback.message.status === 400 && 'Données invalides'}\n                            {data.callback.message.status === 409 && 'Erreur avec le solveur'}\n                            {data.callback.message.status === 500 && 'Erreur système'}\n                        </Message.Header>\n                        <Message.Content>\n                            {data.callback.message.status === 404 && 'Trop de contraintes liées aux règles ou manque de personnes'}\n                            {data.callback.message.status === 500 && 'Contactes le dev'}\n                        </Message.Content>\n                    </Message>\n                </Modal>\n                <Accordion\n                    panels={panels}\n                    exclusive={false}\n                    fluid\n                />\n            </Container>\n        </>\n\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}