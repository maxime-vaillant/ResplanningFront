{"version":3,"sources":["components/hooks/usePlanning.js","components/helpers/PlanningHelper.js","components/UI/OnCallTimeContainer.js","components/UI/AvailabilitiesContainer.js","components/UI/PlanningContainer.js","components/hooks/useRulesForm.js","components/helpers/FormHelper.js","components/UI/RulesForm.js","components/hooks/useModalForm.js","components/UI/RulesTable.js","components/UI/RulesContainer.js","components/UI/MenuContainer.js","App.js","index.js"],"names":["onCallTimes","config","rulesByPerson","rulesBySlot","slots","slotCount","onCallTimeCount","usePlanning","useState","people","planning","callback","error","message","status","statusMsg","personCount","loading","confirmOpen","data","setData","colors","addSlot","key","text","forEach","addPerson","slot","removeSlot","slotId","filter","e","person","item","removePerson","personId","removeAllPeople","removeOnCallTime","onCallTimeId","removeAllOnCallTime","removeAllSlots","getOnCallTimeValue","onCallTime","find","value","getCsvData","csvData","push","csvRow","getIdsToSend","array","arrayTmp","adaptImportRules","rules","rule","length","id","importRules","file","setFile","setIsRuleOpen","a","response","Promise","resolve","reader","FileReader","onload","result","readAsText","newRules","JSON","parse","importCsv","setIsImportOpen","reqData","FormData","append","method","url","axios","then","stringify","catch","console","log","generatePlanning","headers","statusText","OnCallTimeContainer","map","Label","color","horizontal","style","marginTop","Icon","name","cursor","onClick","initialValue","save","newOnCallTime","updateOnCallTimes","Popup","content","inverted","basic","trigger","addOnCallTimes","AvailabilitiesContainer","Table","celled","padded","Header","Row","textAlign","HeaderCell","singleLine","width","newSlot","updateSlots","Cell","Button","circular","icon","Body","newPerson","normalize","replace","updatePeople","selectable","positive","negative","handleChangeOnAvailabilities","PlanningContainer","Group","Dropdown","clearable","className","placeholder","fluid","options","onChange","i","datas","handleChangeOnPlanning","selection","resetPlanning","useRulesForm","ruleName","ruleId","existingRule","param","counter","on_call_times","exigency","disable","setRule","filteredPeopleChoice","concat","includes","filteredSlotsChoice","onCallTimesChoice","String","peopleChoice","slotsChoice","formData","setFormData","handleCloseOnModal","modalSettings","setModalSettings","isOpen","RulesForm","onCallTimesChosen","peopleChosen","slotsChosen","Container","Grid","columns","Column","newMethod","handleChangeOnMethod","Input","min","newValue","parseInt","handleChangeOnParam","type","removeOnCallTimeInRule","sort","addOnCallTimeInRule","removeSlotInRule","b","addSlotInRule","removePersonInRule","addPersonInRule","handleChangeOnCounter","Divider","submitForm","useModalForm","RulesTable","columnsName","Modal","open","onClose","Content","index","removeRule","handleEditRule","itm","split","isEmpty","reduce","s","Checkbox","toggle","checked","handleOpenOnModal","RulesContainer","containers","title","panels","_","times","Accordion","exclusive","MenuContainer","isImportOpen","isRuleOpen","selectedRuleFile","setSelectedRuleFile","selectedFile","setSelectedFile","Menu","Item","header","position","exportFromJSON","onCallTimesCount","fileName","exportType","types","json","htmlFor","fontWeight","marginRight","accept","target","files","display","Actions","filename","handleOpenConfirm","Confirm","onCancel","handleCloseConfirm","onConfirm","resetData","App","size","paddingLeft","paddingTop","overflow","minHeight","Dimmer","active","page","Loader","Message","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09c6a9c6.chunk.js","sourcesContent":["import { useState } from 'react'\nimport config from '../../assets/resplanning-config-2.json'\n\nconst {\n    onCallTimes,\n    rulesByPerson,\n    rulesBySlot,\n    slots,\n    slotCount,\n    onCallTimeCount\n} = config\n\nconst usePlanning = () => {\n    const colors = ['blue', 'red', 'orange', 'yellow', 'olive', 'green', 'teal', 'violet', 'purple', 'pink', 'brown']\n\n    const [data, setData] = useState({\n        slots: slots,\n        people: [],\n        onCallTimes: onCallTimes,\n        rulesByPerson: rulesByPerson,\n        rulesBySlot: rulesBySlot,\n        planning: {},\n        callback: {\n            error: false,\n            message: { status: null, statusMsg: null }\n        },\n        onCallTimeCount: onCallTimeCount,\n        slotCount: slotCount,\n        personCount: 0,\n        loading: false,\n        confirmOpen: false\n    })\n\n    return {\n        data,\n        setData,\n        colors\n    }\n}\n\nexport default usePlanning","import axios from \"axios\"\n\nexport const addSlot = (data, setData) => {\n    data.slots = [...data.slots, {key: data.slotCount, text: '00h00'}]\n    data.people.forEach(({ key }) =>\n        data.planning[key][data.slotCount] = null\n    )\n    data.slotCount += 1\n    setData({...data})\n}\n\nexport const addPerson = (data, setData) => {\n    data.people = [...data.people, {key: data.personCount, text: 'Personne'}]\n    data.planning[data.personCount] = {}\n    data.slots.forEach(slot => {\n        data.planning[data.personCount][slot.key] = null\n    })\n    data.personCount += 1\n    setData({...data})\n}\n\nexport const addOnCallTimes = (data, setData) => {\n    data.onCallTimes = [...data.onCallTimes, {key: data.onCallTimeCount, text: 'Perm', value: data.onCallTimeCount}]\n    data.onCallTimeCount += 1\n    setData({...data})\n}\n\nexport const removeSlot = (data, setData, slotId) => {\n    data.slots = data.slots.filter(e  => e.key !== slotId)\n    data.people.forEach(person =>\n        delete data.planning[person.key][slotId]\n    )\n    data.rulesBySlot.forEach(item =>\n        item.slots = item.slots.filter(e => e !== slotId)\n    )\n    data.rulesByPerson.forEach(item =>\n        item.people = item.people.filter(e => e !== slotId)\n    )\n    setData({...data})\n}\n\nexport const removePerson = (data, setData, personId) => {\n    data.people = data.people.filter(e => e.key !== personId)\n    delete data.planning[personId]\n    data.rulesBySlot.forEach(item =>\n        item.slots = item.slots.filter(e => e !== personId)\n    )\n    data.rulesByPerson.forEach(item =>\n        item.people = item.people.filter(e => e !== personId)\n    )\n    setData({...data})\n}\n\nexport const removeAllPeople = (data, setData) => {\n    const { people } = data\n    people.forEach(({ key }) => {\n        removePerson(data, setData, key)\n    })\n}\n\nexport const removeOnCallTime = (data, setData, onCallTimeId) => {\n    data.onCallTimes = data.onCallTimes.filter(e => e.key !== onCallTimeId)\n    data.people.forEach(person  => {\n        data.slots.forEach(slot  => {\n            if (slot.key in data.planning[person.key] && data.planning[person.key][slot.key] === onCallTimeId){\n                data.planning[person.key][slot.key] = null\n            }\n        })\n    })\n    setData({...data})\n}\n\nexport const removeAllOnCallTime = (data, setData) => {\n    const { onCallTimes } = data\n    onCallTimes.forEach(({ key }) => {\n        if ( key !== 0 ) {\n            removeOnCallTime(data, setData, key)\n        }\n    })\n}\n\nexport const removeRule = (rule, data, setData, index) => {\n    if (rule === 'slot'){\n        data.rulesBySlot = data.rulesBySlot.filter((e, i) => i !== index)\n    } else if  (rule === 'person'){\n        data.rulesByPerson = data.rulesByPerson.filter((e, i) => i !== index)\n    }\n    setData({ ...data })\n}\n\nexport const removeAllSlots = (data, setData) => {\n    const { slots } = data\n    slots.forEach(({ key }) => {\n        removeSlot(data, setData, key)\n    })\n}\n\nexport const updateSlots = (data, setData, newSlot, slotId) => {\n    data.slots.find(e => e.key === slotId).text = newSlot\n    setData({...data})\n}\n\nexport const updatePeople = (data, setData, newPerson, personId) => {\n    data.people.find(e => e.key === personId).text = newPerson.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")\n    setData({...data})\n}\n\nexport const updateOnCallTimes = (data, setData, newOnCallTime, onCallTimeId) => {\n    data.onCallTimes.find(e => e.key === onCallTimeId).text = newOnCallTime\n    setData({...data})\n}\n\nexport const handleChangeOnAvailabilities = (data, setData, personId, slotId) => {\n    if (slotId in data.planning[personId]){\n        delete data.planning[personId][slotId]\n    } else {\n        data.planning[personId][slotId] = null\n    }\n    setData({...data})\n}\n\nexport const handleChangeOnPlanning = (data, setData, value, personId, slotId) => {\n    data.planning[personId][slotId] = value !== '' ? data.onCallTimes.find(e => e.value === value).key : null\n    setData({...data})\n}\n\nexport const getOnCallTimeValue = (data,  personId, slotId) => {\n    let key = null\n    if (slotId in data.planning[personId]){\n        key = data.planning[personId][slotId]\n    }\n    if (key !== null) {\n        const onCallTime = data.onCallTimes.find(e => e.key === key)\n        if (onCallTime) {\n            return onCallTime.value\n        }\n    }\n    return null\n}\n\nexport const getCsvData = (data) => {\n    const csvData = [['Personnes']]\n    data.slots.forEach(slot => {\n        csvData[0].push(slot.text)\n    })\n    data.people.forEach(person => {\n        const csvRow = [data.people.find(e => e.key === person.key).text]\n        data.slots.forEach(slot => {\n            let key = null\n            if (slot.key in data.planning[person.key]){\n                key = data.planning[person.key][slot.key]\n            }\n            csvRow.push(key !== null ? data.onCallTimes.find(e => e.key === key).text : null)\n        })\n        csvData.push(csvRow)\n    })\n    return csvData\n}\n\nexport const resetData = (data, setData) => {\n    data = {\n        slots: [],\n        people: [],\n        onCallTimes: [\n            {\n                key: 0,\n                text: \"Pause\",\n                value: 0\n            }\n        ],\n        rulesByPerson: [],\n        rulesBySlot: [],\n        planning: {},\n        callback: {\n            error: false,\n            message: { status: null, statusMsg: null }\n        },\n        onCallTimeCount: 1,\n        slotCount: 0,\n        personCount: 0,\n        loading: false,\n        confirmOpen: false\n    }\n    setData({...data})\n}\n\nexport const resetPlanning = (data, setData) => {\n    data.people.forEach(person => {\n        data.slots.forEach(slot => {\n            if (slot.key in data.planning[person.key]){\n                data.planning[person.key][slot.key] = null\n            }\n        })\n    })\n    setData({...data})\n}\n\nconst getIdsToSend = (array) => {\n    const arrayTmp = []\n    array.forEach(e => arrayTmp.push(e.key))\n    return arrayTmp\n}\n\nconst adaptImportRules = (data, rules) => {\n    rules.forEach( rule => {\n        if (rule.slots.length > 0 && rule.slots[0] !== -1) {\n            rule.slots = rule.slots.filter(id => data.slots.find(({ key }) => key === id))\n        } else {\n            rule.slots = [-1]\n        }\n        if (rule.people.length > 0 && rule.people[0] !== -1) {\n            rule.people = rule.people.filter(id => data.people.find(({ key }) => key === id))\n        } else {\n            rule.people = [-1]\n        }\n    })\n    return rules\n}\n\nexport const importRules = async (data, setData, file, setFile, setIsRuleOpen) => {\n    if (file !== null) {\n        let response = '{}'\n        await new Promise((resolve) => {\n            const reader = new FileReader()\n            reader.onload = function() {\n                response = reader.result\n                resolve()\n            }\n            reader.readAsText(file)\n        })\n        const newRules = JSON.parse(response)\n        const {\n            onCallTimes,\n            rulesByPerson,\n            rulesBySlot,\n            onCallTimeCount\n        } = newRules\n        removeAllOnCallTime(data, setData)\n        data.onCallTimes = onCallTimes\n        data.rulesBySlot = adaptImportRules(data, rulesBySlot)\n        data.rulesByPerson = adaptImportRules(data, rulesByPerson)\n        data.onCallTimeCount = onCallTimeCount\n        setData({...data})\n        setFile(null)\n    }\n    setIsRuleOpen(false)\n}\n\nexport const importCsv = async (data, setData, file, setFile, setIsImportOpen) => {\n    data.loading = true\n    setData({...data})\n    if (file !== null) {\n        const reqData = new FormData()\n        reqData.append('file', file)\n        const config = {\n            method: 'POST',\n            url: 'https://resplanning-back.herokuapp.com/parse-csv/',\n            // url: 'http://localhost:8000/parse-csv/',\n            data : reqData\n        }\n        await axios(config)\n            .then(function (response) {\n                removeAllPeople(data, setData)\n                removeAllSlots(data, setData)\n                data.people = JSON.parse(JSON.stringify(response.data.people))\n                data.slots = JSON.parse(JSON.stringify(response.data.slots))\n                data.personCount = data.people.length\n                data.slotCount = data.slots.length\n                data.planning = JSON.parse(JSON.stringify(response.data.planning))\n            })\n            .catch(function (error) {\n                console.log(error)\n            });\n    }\n    setFile(null)\n    setIsImportOpen(false)\n    data.loading = false\n    setData({...data})\n}\n\nexport const generatePlanning = async (data, setData) => {\n    data.loading = true\n    setData({...data})\n    const reqData = JSON.stringify({\n        \"planning\": data.planning,\n        \"on_call_times\": getIdsToSend(data.onCallTimes),\n        \"slots\": getIdsToSend(data.slots),\n        \"people\": getIdsToSend(data.people),\n        \"rules_by_person\": data.rulesByPerson,\n        \"rules_by_slot\": data.rulesBySlot\n    })\n    const config = {\n        method: 'POST',\n        url: 'https://resplanning-back.herokuapp.com/generate/',\n        // url: 'http://localhost:8000/generate/',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        data : reqData\n    }\n    await axios(config)\n        .then(function (response) {\n            data.planning = JSON.parse(JSON.stringify(response.data.planning))\n            data.loading = false\n            setData({...data})\n            console.log(data.planning)\n        })\n        .catch(function (error) {\n            data.callback.error = true\n            data.callback.message = { status: error.response.status, statusMsg: error.response.statusText }\n            data.loading = false\n            setData({...data})\n        });\n}","import usePlanning from '../hooks/usePlanning'\nimport {Icon, Label, Popup} from 'semantic-ui-react'\nimport EditableLabel from 'react-editable-label'\nimport {addOnCallTimes, removeOnCallTime, updateOnCallTimes} from '../helpers/PlanningHelper';\n\nconst OnCallTimeContainer = ({ data, setData }) => {\n    const {\n        colors\n    } = usePlanning()\n\n    return (\n        <>\n            <div>\n                <b>La première permanence complète le planning par défaut</b>\n            </div>\n            {\n                data.onCallTimes.map(\n                    ({ key, text }) =>\n                        <Label key={key} color={colors[key%colors.length]} horizontal style={{ marginTop: '1vh'}}>\n                            { key !== 0 && <Icon\n                                name='remove'\n                                style={{ cursor: 'pointer' }}\n                                onClick={() => removeOnCallTime(data, setData, key)}\n                            />}\n                            <EditableLabel\n                                initialValue={text}\n                                save={value => updateOnCallTimes(data, setData, value, key)}\n                            />\n                        </Label>\n                )\n            }\n            <Popup content='Ajouter une permanence' inverted basic trigger={\n                <Icon\n                    color='green'\n                    name='add'\n                    style={{ cursor: 'pointer' }}\n                    onClick={() => addOnCallTimes(data, setData)}\n                />\n            } />\n        </>\n    )\n}\n\nexport default OnCallTimeContainer","import { Button, Icon, Table } from 'semantic-ui-react'\nimport EditableLabel from 'react-editable-label'\nimport {\n    addPerson,\n    addSlot,\n    handleChangeOnAvailabilities,\n    removePerson, removeSlot,\n    updatePeople,\n    updateSlots\n} from \"../helpers/PlanningHelper\";\n\nconst AvailabilitiesContainer = ({ data, setData }) => {\n    return (\n        <>\n            <Table celled padded color='green'>\n                <Table.Header>\n                    <Table.Row textAlign='center'>\n                        <Table.HeaderCell singleLine width={4}>\n                            Personnes\n                        </Table.HeaderCell>\n                        {\n                            data.slots.map(slot =>\n                                <Table.HeaderCell singleLine key={slot.key}>\n                                    <Icon\n                                        color='red'\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removeSlot(data, setData, slot.key)}\n                                    />\n                                    <EditableLabel\n                                        initialValue={slot.text}\n                                        save={value => updateSlots(data, setData, value, slot.key)}\n                                    />\n                                </Table.HeaderCell>\n                            )\n                        }\n                        <Table.Cell>\n                            <Button\n                                circular\n                                color='green'\n                                icon='add'\n                                onClick={() => addSlot(data, setData)}\n                            />\n                        </Table.Cell>\n                        <Table.Cell>\n                            <Button color='green' onClick={() => addSlot(data, setData)}>Insérer</Button>\n                        </Table.Cell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                    {\n                        data.people.map(person =>\n                            <Table.Row key={person.key}>\n                                <Table.Cell singleLine textAlign='center'>\n                                    <Icon\n                                        color='red'\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removePerson(data, setData, person.key)}\n                                    />\n                                    <EditableLabel\n                                        initialValue={person.text}\n                                        save={value => updatePeople(data, setData, value, person.key)}\n                                    />\n                                </Table.Cell>\n                                {\n                                    data.slots.map(slot =>\n                                        <Table.Cell\n                                            selectable\n                                            positive={slot.key in data.planning[person.key]}\n                                            negative={!(slot.key in data.planning[person.key])}\n                                            onClick={() => {\n                                                handleChangeOnAvailabilities(data, setData, person.key, slot.key)\n                                            }}\n                                            key={person+slot+person.key+slot.key}\n                                        />\n                                    )\n                                }\n                            </Table.Row>\n                        )\n                    }\n                </Table.Body>\n            </Table>\n            <Button color='green' onClick={() => {addPerson(data, setData)}}>\n                Ajouter une personne\n            </Button>\n        </>\n    )\n}\n\nexport default AvailabilitiesContainer","import { Button, Dropdown, Icon, Table } from 'semantic-ui-react'\nimport {\n    addPerson,\n    addSlot,\n    getOnCallTimeValue,\n    handleChangeOnPlanning,\n    removePerson,\n    removeSlot, resetPlanning\n} from '../helpers/PlanningHelper'\nimport usePlanning from \"../hooks/usePlanning\";\n\nconst PlanningContainer = ({ data, setData }) => {\n    const {\n        colors\n    } = usePlanning()\n\n    return (\n        <>\n            <b>Pense à vider le planning si tu veux en générer un nouveau</b>\n            <Table celled padded color='green'>\n                <Table.Header>\n                    <Table.Row textAlign='center'>\n                        <Table.HeaderCell singleLine width={4}>\n                            Personnes\n                        </Table.HeaderCell>\n                        {\n                            data.slots.map(slot =>\n                                <Table.HeaderCell singleLine key={slot.key}>\n                                    <Icon\n                                        color='red'\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removeSlot(data, setData, slot.key)}\n                                    />\n                                    {slot.text}\n                                </Table.HeaderCell>\n                            )\n                        }\n                        <Table.Cell>\n                            <Button\n                                circular\n                                color='green'\n                                icon='add'\n                                onClick={() => addSlot(data, setData)}\n                            />\n                        </Table.Cell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                    {\n                        data.people.map(person =>\n                            <Table.Row key={person.key}>\n                                <Table.Cell singleLine textAlign='center'>\n                                    <Icon\n                                        color='red'\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removePerson(data, setData, person.key)}\n                                    />\n                                    {person.text}\n                                </Table.Cell>\n                                {\n                                    data.slots.map(slot =>\n                                        <Table.Cell singleLine key={person+slot+person.key+slot.key}>\n                                            {\n                                                slot.key in data.planning[person.key] ?\n                                                    <Button.Group\n                                                        color={\n                                                            getOnCallTimeValue(data, person.key, slot.key) !== null ?\n                                                                colors[getOnCallTimeValue(data, person.key, slot.key)%colors.length] :\n                                                                null\n                                                        }\n                                                    >\n                                                        <Dropdown\n                                                            clearable\n                                                            className='button'\n                                                            placeholder='Perm'\n                                                            fluid\n                                                            value={ getOnCallTimeValue(data, person.key, slot.key) }\n                                                            options={data.onCallTimes}\n                                                            onChange={(i, datas) => {\n                                                                handleChangeOnPlanning(data, setData, datas.value, person.key, slot.key)\n                                                            }}\n                                                            selection\n                                                            style={{ width: '100%' }}\n                                                        />\n                                                    </Button.Group>\n                                                     :\n                                                    null\n                                            }\n                                        </Table.Cell>\n                                    )\n                                }\n                            </Table.Row>\n                        )\n                    }\n                </Table.Body>\n            </Table>\n            <Button color='green' onClick={() => {addPerson(data, setData)}}>\n                Ajouter une personne\n            </Button>\n            <Button color='red' onClick={() => resetPlanning(data, setData)}>Vider</Button>\n        </>\n    )\n}\n\nexport default PlanningContainer","import { useState } from 'react'\n\nconst useRulesForm = (data, ruleName, ruleId) => {\n    const {\n        onCallTimes,\n        people,\n        slots,\n        rulesBySlot,\n        rulesByPerson\n    } = data\n\n    const existingRule = ruleName === 'slot' ?\n        rulesBySlot[ruleId] :\n        rulesByPerson[ruleId]\n\n    const [rule, setRule] = useState(existingRule ? {...existingRule} : {\n        method: \"exact\",\n        param: 0,\n        counter: -1,\n        slots: [],\n        people: [],\n        on_call_times: [],\n        exigency: 0,\n        disable: false\n    })\n\n    const filteredPeopleChoice = rule.people[0] !== -1 ?\n        [{key: -1, text: 'Tout le monde', value: -1}].concat(people.filter(({ key }) => !rule.people.includes(key))) :\n        []\n\n    const filteredSlotsChoice = rule.slots[0] !== -1 ?\n        [{key: -1, text: 'Tous les créneaux', value: -1}].concat(slots.filter(({ key }) => !rule.slots.includes(key))) :\n        []\n\n    const [formData, setFormData] = useState({\n        onCallTimesChoice: onCallTimes.filter(({ key }) => !rule.on_call_times.includes(String(key))),\n        peopleChoice: filteredPeopleChoice,\n        slotsChoice: filteredSlotsChoice,\n    })\n\n    return {\n        rule,\n        setRule,\n        formData,\n        setFormData\n    }\n}\n\nexport default useRulesForm","export const handleChangeOnMethod = (rule, setRule, newMethod) => {\n    rule.method = newMethod ? newMethod : 'exact'\n    setRule({...rule})\n}\n\nexport const handleChangeOnParam = (rule, setRule, newValue) => {\n    rule.param = parseInt(newValue)\n    setRule({...rule})\n}\n\nexport const handleChangeOnCounter = (rule, setRule, newValue) => {\n    rule.counter = parseInt(newValue)\n    setRule({...rule})\n}\n\nexport const addOnCallTimeInRule = (rule, setRule, formData, setFormData, onCallTimeId) => {\n    rule.on_call_times = [...rule.on_call_times, String(onCallTimeId)].sort()\n    formData.onCallTimesChoice = formData.onCallTimesChoice.filter(({ key }) => key !== onCallTimeId)\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const addSlotInRule = (rule, setRule, formData, setFormData, slotId) => {\n    rule.slots = slotId === -1 ? [slotId] : [...rule.slots, slotId].sort((a, b) => a.key - b.key)\n    formData.slotsChoice = slotId === -1 ? [] : formData.slotsChoice.filter(({ key }) => key !== slotId)\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const addPersonInRule = (rule, setRule, formData, setFormData, personId) => {\n    rule.people = personId === -1 ? [personId] : [...rule.people, personId].sort((a, b) => a.key - b.key)\n    formData.peopleChoice = personId === -1 ? [] : formData.peopleChoice.filter(({ key }) => key !== personId)\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const removeOnCallTimeInRule = (rule, setRule, formData, setFormData, data, onCallTimeId) => {\n    rule.on_call_times = rule.on_call_times.filter(id => id !== onCallTimeId)\n    formData.onCallTimesChoice = data.onCallTimes.filter(({ key }) => !rule.on_call_times.includes(String(key)))\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const removeSlotInRule = (rule, setRule, formData, setFormData, slots, slotId) => {\n    rule.slots = rule.slots.filter(id => id !== slotId)\n    formData.slotsChoice = [{key: -1, text: 'Tous les créneaux', value: -1}].concat(\n        slots.filter(({ key }) => !rule.slots.includes(key))\n    )\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const removePersonInRule = (rule, setRule, formData, setFormData, people, personId) => {\n    rule.people = rule.people.filter(id => id !== personId)\n    formData.peopleChoice = [{key: -1, text: 'Tout le monde', value: -1}].concat(\n        people.filter(({ key }) => !rule.people.includes(key))\n    )\n    setRule({...rule})\n    setFormData({...formData})\n}\n\nexport const handleOpenConfirm = (data, setData) => {\n    data.confirmOpen = true\n    setData({...data})\n}\n\nexport const handleCloseConfirm = (data, setData) => {\n    data.confirmOpen = false\n    setData({...data})\n}\n\nexport const handleCloseOnModal = (modalSettings, setModalSettings) => {\n    modalSettings.isOpen = false\n    setModalSettings({...modalSettings})\n}\n\nexport const handleOpenOnModal = (modalSettings, setModalSettings) => {\n    modalSettings.isOpen = true\n    modalSettings.ruleId = null\n    setModalSettings({...modalSettings})\n}\n\nexport const handleEditRule = (modalSettings, setModalSettings, id) => {\n    modalSettings.isOpen = true\n    modalSettings.ruleId = id\n    setModalSettings({...modalSettings})\n}\n\nexport const submitForm = (modalSettings, setModalSettings, rule, ruleName, ruleId, data, setData) => {\n    const {\n        rulesBySlot,\n        rulesByPerson\n    } = data\n\n    const rules = ruleName === 'slot' ?\n        rulesBySlot :\n        rulesByPerson\n\n    if ( rules[ruleId] ) {\n        rules[ruleId] = rule\n    } else {\n        rules.push(rule)\n    }\n\n    setData({...data})\n    modalSettings.isOpen = false\n    setModalSettings({...modalSettings})\n}","import {Button, Container, Divider, Dropdown, Grid, Icon, Input, Label} from 'semantic-ui-react'\nimport usePlanning from '../hooks/usePlanning'\nimport useRulesForm from '../hooks/useRulesForm'\nimport {\n    addOnCallTimeInRule,\n    addPersonInRule,\n    addSlotInRule, handleChangeOnCounter, handleChangeOnMethod, handleChangeOnParam, handleCloseOnModal,\n    removeOnCallTimeInRule, removePersonInRule,\n    removeSlotInRule, submitForm\n} from \"../helpers/FormHelper\";\n\nconst RulesForm = ({ modalSettings, setModalSettings, ruleName, ruleId, data, setData }) => {\n    const {\n        rule,\n        setRule,\n        formData,\n        setFormData\n    } = useRulesForm(data, ruleName, ruleId)\n\n    const {\n        onCallTimes,\n        people,\n        slots\n    } = data\n\n    const {\n        onCallTimesChoice,\n        peopleChoice,\n        slotsChoice,\n    } = formData\n\n    const {\n        on_call_times: onCallTimesChosen,\n        people: peopleChosen,\n        slots: slotsChosen\n    } = rule\n\n    const {\n        colors\n    } = usePlanning()\n\n    const methodOptions = [\n        { key: 'exact', value: 'exact', text: 'Exactement'},\n        { key: 'at_least', value: 'at_least', text: 'Au moins'},\n        { key: 'at_most', value: 'at_most', text: 'Au plus'},\n    ]\n\n    return(\n        <Container>\n            <Grid>\n                <Grid.Row columns={4}>\n                    <Grid.Column>\n                        <h3>Méthode :</h3>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Dropdown\n                            clearable={rule.method !== 'exact'}\n                            value={rule.method}\n                            selection\n                            onChange={(i, datas) => handleChangeOnMethod(rule, setRule, datas.value)}\n                            options={methodOptions}\n                        />\n                    </Grid.Column>\n                    <Grid.Column>\n                        <h3>Paramètre :</h3>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Input\n                            value={rule.param}\n                            min={0}\n                            onChange={(i, datas) => handleChangeOnParam(rule, setRule, datas.value)}\n                            type='number'\n                        />\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row columns={2}>\n                    <Grid.Column>\n                        <h3>Permanences :</h3>\n                    </Grid.Column>\n                    <Grid.Column>\n                        {\n                            onCallTimesChosen.map(onCallTimeId =>\n                                <Label\n                                    key={onCallTimeId}\n                                    color={colors[onCallTimeId%colors.length]}\n                                    style={{ marginTop: '0.5vh'}}\n                                >\n                                    <Icon\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removeOnCallTimeInRule(rule, setRule, formData, setFormData, data, onCallTimeId)}\n                                    />\n                                    {onCallTimes.find(({ key }) => key === parseInt(onCallTimeId)).text}\n                                </Label>\n                            )\n                        }\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    {\n                        onCallTimesChoice.map(({ key, text }) =>\n                            <Label\n                                horizontal\n                                key={key}\n                                color={colors[key%colors.length]}\n                                style={{ cursor: 'pointer', marginTop: '0.5vh' }}\n                                onClick={() => addOnCallTimeInRule(rule, setRule, formData, setFormData, key)}\n                            >\n                                {text}\n                            </Label>\n                        )\n                    }\n                </Grid.Row>\n                <Grid.Row columns={2}>\n                    <Grid.Column>\n                        <h3>Créneaux :</h3>\n                    </Grid.Column>\n                    <Grid.Column>\n                        {\n                            slotsChosen.map(slot =>\n                                <Label\n                                    horizontal\n                                    key={slot}\n                                    color={slot === -1 ? 'purple' : colors[slot%colors.length]}\n                                    style={{ marginTop: '0.5vh'}}\n                                >\n                                    <Icon\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removeSlotInRule(rule, setRule, formData, setFormData, slots, slot)}\n                                    />\n                                    {slot === -1 ? 'Tous les créneaux' : slots.find(({ key }) => key === slot).text}\n                                </Label>\n                            )\n                        }\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    {\n                        slotsChoice.map(({ key, text }) =>\n                            <Label\n                                key={key}\n                                color={key === -1 ? 'purple' : colors[key%colors.length]}\n                                style={{ cursor: 'pointer', marginTop: '0.5vh' }}\n                                onClick={() => addSlotInRule(rule, setRule, formData, setFormData, key)}\n                            >\n                                {text}\n                            </Label>\n                        )\n                    }\n                </Grid.Row>\n                <Grid.Row columns={2}>\n                    <Grid.Column>\n                        <h3>Personnes :</h3>\n                    </Grid.Column>\n                    <Grid.Column>\n                        {\n                            peopleChosen.map(person =>\n                                <Label\n                                    horizontal\n                                    key={person}\n                                    color={person === -1 ? 'teal' : colors[person%colors.length]}\n                                    style={{ marginTop: '0.5vh'}}\n                                >\n                                    <Icon\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removePersonInRule(rule, setRule, formData, setFormData, people, person)}\n                                    />\n                                    {person === -1 ? 'Tout le monde' : people.find(({ key }) => key === person).text}\n                                </Label>\n                            )\n                        }\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    {\n                        peopleChoice.map(({ key, text }) =>\n                            <Label\n                                key={key}\n                                color={key === -1 ? 'teal' : colors[key%colors.length]}\n                                style={{ cursor: 'pointer', marginTop: '0.5vh' }}\n                                onClick={() => addPersonInRule(rule, setRule, formData, setFormData, key)}\n                            >\n                                {text}\n                            </Label>\n                        )\n                    }\n                </Grid.Row>\n                { ruleName === 'person' &&\n                (<Grid.Row columns={4}>\n                    <Grid.Column>\n                        <h3>Lot :</h3>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Input\n                            value={rule.counter}\n                            min={-1}\n                            onChange={(i, datas) => handleChangeOnCounter(rule, setRule, datas.value)}\n                            type='number'\n                        />\n                    </Grid.Column>\n                </Grid.Row>)\n                }\n            </Grid>\n            <Divider />\n            <Button negative onClick={() => handleCloseOnModal(modalSettings, setModalSettings)}>Annuler</Button>\n            <Button positive onClick={() => submitForm(modalSettings, setModalSettings, rule, ruleName, ruleId, data, setData)}>Sauvegarder</Button>\n        </Container>\n    )\n}\n\nexport default RulesForm","import {useState} from 'react'\n\nconst useModalForm = () => {\n    const [modalSettings, setModalSettings] = useState({\n        isOpen: false,\n        ruleId: null\n    })\n\n    return {\n        modalSettings,\n        setModalSettings\n    }\n}\n\nexport default useModalForm","import {Button, Checkbox, Icon, Label, Modal, Table} from 'semantic-ui-react'\nimport usePlanning from '../hooks/usePlanning'\nimport { removeRule } from '../helpers/PlanningHelper'\nimport {isEmpty} from 'lodash'\nimport RulesForm from './RulesForm'\nimport {handleCloseOnModal, handleEditRule, handleOpenOnModal} from \"../helpers/FormHelper\";\nimport useModalForm from \"../hooks/useModalForm\";\n\nconst RulesTable = ({ name, data, setData }) => {\n    const {\n        colors\n    } = usePlanning()\n\n    const rules = name === 'slot' ? data.rulesBySlot : data.rulesByPerson\n\n    const {\n        modalSettings,\n        setModalSettings\n    } = useModalForm()\n\n    const columnsName = name === 'person' ?\n        ['', '', 'Méthode', 'Paramètre', 'Permanences', 'Créneaux', 'Personnes', 'Lot', 'Exigence', 'Actif'] :\n        ['', '', 'Méthode', 'Paramètre', 'Permanences', 'Créneaux', 'Personnes', 'Exigence', 'Actif']\n\n    return (\n        <>\n            <Modal\n                open={modalSettings.isOpen}\n                onClose={() => handleCloseOnModal(modalSettings, setModalSettings)}\n            >\n                <Modal.Header>Règle par {name === 'slot' ? 'créneau' : 'personne'}</Modal.Header>\n                <Modal.Content>\n                    <RulesForm\n                        modalSettings={modalSettings}\n                        setModalSettings={setModalSettings}\n                        ruleId={modalSettings.ruleId}\n                        ruleName={name}\n                        data={data}\n                        setData={setData}\n                    />\n                </Modal.Content>\n            </Modal>\n            {\n                name === 'slot' &&\n                <div>\n                    <b>Si une permanence n'apparaît pas sur un créneau, elle est automatiquement désactivée</b>\n                </div>\n            }\n            <Table celled padded color='blue'>\n                <Table.Header>\n                    <Table.Row>\n                        {\n                            columnsName.map((item, index) =>\n                                <Table.HeaderCell key={index}>\n                                    {item}\n                                </Table.HeaderCell>\n                            )\n                        }\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {\n                        rules.map((item, index) =>\n                            <Table.Row key={item+index}>\n                                <Table.Cell style={{ textAlign: 'center' }}>\n                                    <Icon\n                                        color='red'\n                                        name='remove'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => removeRule(name, data, setData, index)}\n                                    />\n                                </Table.Cell>\n                                <Table.Cell style={{ textAlign: 'center' }}>\n                                    <Icon\n                                        color='blue'\n                                        name='edit'\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() => handleEditRule(modalSettings, setModalSettings, index)}\n                                    />\n                                </Table.Cell>\n                                <Table.Cell>\n                                    {item.method === 'at_least'  && 'Au moins'}\n                                    {item.method === 'at_most'  && 'Au plus'}\n                                    {item.method === 'exact'  && 'Exactement'}\n                                </Table.Cell>\n                                <Table.Cell style={{ textAlign: 'center' }}>\n                                    {item.param}\n                                </Table.Cell>\n                                <Table.Cell>\n                                    {item.on_call_times.map(itm => {\n                                        const onCallTimes = data.onCallTimes.filter(e => itm.split('+').map(i => (parseInt(i))).includes(e.key))\n                                        if (!isEmpty(onCallTimes)){\n                                            return (\n                                                <Label\n                                                    key={itm}\n                                                    color={colors[onCallTimes.length > 1 ? onCallTimes.reduce((s, a) => s + a.key, 0)*10%colors.length : onCallTimes[0].key%colors.length]}\n                                                    horizontal\n                                                    style={{ marginTop: '1vh'}}\n                                                >\n                                                    {onCallTimes[0].text}\n                                                    {onCallTimes.filter(i => i.key !== onCallTimes[0].key).map(i => ' + ' + i.text)}\n                                                </Label>\n                                            )\n                                        }\n                                        return null\n                                    })}\n                                </Table.Cell>\n                                <Table.Cell>\n                                    {item.slots.map(slot => {\n                                        return(\n                                            <Label\n                                                key={slot}\n                                                color={slot === -1 ? 'purple' : colors[slot%colors.length]}\n                                                style={{ marginTop: '1vh'}}\n                                            >\n                                                {slot === -1 ? 'Tous les créneaux' : data.slots.find(e => e.key === slot)?.text}\n                                            </Label>\n                                        )\n                                    })}\n                                </Table.Cell>\n                                <Table.Cell>\n                                    {item.people.map(person => {\n                                        return(\n                                            <Label\n                                                key={person}\n                                                color={person === -1 ? 'teal' : colors[person%colors.length]}\n                                                style={{ marginTop: '1vh'}}\n                                            >\n                                                {person === -1 ? 'Tout le monde' : data.people.find(e => e.key === person).text}\n                                            </Label>\n                                        )\n                                    })}\n                                </Table.Cell>\n                                {\n                                    name === 'person' && (\n                                        <Table.Cell style={{ textAlign: 'center' }}>\n                                            {\n                                                (item.counter === -1 && !isEmpty(item.people) && item.people[0] === -1 && 'Tous') ||\n                                                (item.counter === -1 && !isEmpty(item.people) && item.people[0] !== -1 && item.people.length) ||\n                                                (item.counter === -1 && isEmpty(item.people) && 0) ||\n                                                (item.counter !== -1 && item.counter)\n                                            }\n                                        </Table.Cell>\n                                    )\n                                }\n                                <Table.Cell style={{ textAlign: 'center' }}>\n                                    <Label circular color={'red'}>\n                                        {item.exigency}\n                                    </Label>\n                                </Table.Cell>\n                                <Table.Cell style={{ textAlign: 'center' }}>\n                                    <Checkbox toggle checked={!item.disable} onChange={() => {\n                                        item.disable = !item.disable\n                                        setData({ ...data })\n                                    }} />\n                                </Table.Cell>\n                            </Table.Row>\n                        )\n                    }\n                </Table.Body>\n            </Table>\n            <Button positive onClick={() => handleOpenOnModal(modalSettings, setModalSettings)}>Ajouter une règle</Button>\n        </>\n    )\n}\n\nexport default RulesTable","import { Accordion, Container, Label } from 'semantic-ui-react'\nimport RulesTable from './RulesTable'\nimport _ from \"lodash\";\n\nconst RulesContainer = ({ data, setData }) => {\n    const containers = [\n        {title: 'Règles par créneau', content: <RulesTable name='slot' data={data} setData={setData} />},\n        {title: 'Règles par personne', content: <RulesTable name='person' data={data} setData={setData} />}\n    ]\n    const panels = _.times(containers.length, (i) => ({\n        key: `panel-${i}`,\n        title: {\n            content: <Label color='black' content={containers[i].title} />\n        },\n        content: {\n            content: containers[i].content\n        }\n    }))\n    return (\n        <Container>\n\n            <Accordion exclusive={false} panels={panels} />\n        </Container>\n    )\n}\n\nexport default RulesContainer","import {Button, Confirm, Container, Divider, Icon, Input, Label, Menu, Modal} from \"semantic-ui-react\";\nimport {generatePlanning, getCsvData, importCsv, importRules, resetData} from \"../helpers/PlanningHelper\";\nimport {CSVLink} from \"react-csv\";\nimport {handleCloseConfirm, handleOpenConfirm} from \"../helpers/FormHelper\";\nimport {useState} from \"react\";\nimport exportFromJSON from 'export-from-json'\n\nconst MenuContainer = ({ data, setData }) => {\n    const [isImportOpen, setIsImportOpen] = useState(false)\n    const [isRuleOpen, setIsRuleOpen] = useState(false)\n    const [selectedRuleFile, setSelectedRuleFile] = useState(null)\n    const [selectedFile, setSelectedFile] = useState(null);\n\n    return (\n        <Menu className=\"ui fixed inverted menu\">\n            <Container>\n                <Menu.Item header>\n                    Resplanning\n                </Menu.Item>\n                <Menu.Item onClick={() => generatePlanning({...data}, setData)}>\n                    <Button color='teal'>Génération Planning</Button>\n                </Menu.Item>\n                <Menu.Menu position='right'>\n                    <Menu.Item>\n                        <Button color='orange' onClick={() => setIsRuleOpen(true)}>\n                            Options Règles\n                        </Button>\n                        <Modal\n                            open={isRuleOpen}\n                            onClose={() => setIsRuleOpen(false)}\n                        >\n                            <Modal.Content>\n                                <Label\n                                    color='olive'\n                                    onClick={()  => exportFromJSON({\n                                        data: {\n                                            onCallTimes: data.onCallTimes,\n                                            rulesByPerson: data.rulesByPerson,\n                                            rulesBySlot: data.rulesBySlot,\n                                            slots: data.slots,\n                                            slotCount: data.slotCount,\n                                            onCallTimesCount: data.onCallTimesCount,\n                                        },\n                                        fileName: 'resplanning-config',\n                                        exportType: exportFromJSON.types.json})\n                                    }\n                                    style={{ cursor: 'pointer'}}\n                                >Exporter</Label>\n                                <Divider />\n                                  <label htmlFor=\"file\" style={{ cursor: 'pointer',fontWeight: 'bold', marginRight: '0.5vw' }}>\n                                    <Label color='violet'>Importer</Label>\n                                </label>\n                                <Input\n                                    id='file'\n                                    type='file'\n                                    accept='.json'\n                                    onChange={(e) => setSelectedRuleFile(e.target.files[0])}\n                                    style={{ display: 'none' }}\n                                />\n                                { selectedRuleFile ? <Icon color='green' name='circle' /> : <Icon color='red' name='circle outline' />}\n                            </Modal.Content>\n                            <Modal.Actions>\n                                <Button color='red' onClick={() => setIsRuleOpen(false)}>Annuler</Button>\n                                <Button color='green' onClick={() => importRules(data, setData, selectedRuleFile, setSelectedRuleFile, setIsRuleOpen)}>Valider</Button>\n                            </Modal.Actions>\n                        </Modal>\n                    </Menu.Item>\n                    <Menu.Item>\n                        <Button color='violet' onClick={() => setIsImportOpen(true)}>Importation Frama</Button>\n                        <Modal\n                            open={isImportOpen}\n                            onClose={() => {\n                                setSelectedFile(null)\n                                setIsImportOpen(false)\n                            }}\n                        >\n                            <Modal.Content style={{ textAlign: 'center' }}>\n                                <label htmlFor=\"file\" style={{ cursor: 'pointer',fontWeight: 'bold', marginRight: '0.5vw' }}>\n                                    <Label color='violet'>Upload un fichier</Label>\n                                </label>\n                                <Input\n                                    id='file'\n                                    type='file'\n                                    accept='.csv'\n                                    onChange={(e) => setSelectedFile(e.target.files[0])}\n                                    style={{ display: 'none' }}\n                                />\n                                { selectedFile ? <Icon color='green' name='circle' /> : <Icon color='red' name='circle outline' />}\n                            </Modal.Content>\n                            <Modal.Actions>\n                                <Button color='red' onClick={() => {\n                                    setSelectedFile(null)\n                                    setIsImportOpen(false)\n                                }}>Annuler</Button>\n                                <Button\n                                    color='green'\n                                    onClick={() => importCsv(data, setData, selectedFile, setSelectedFile, setIsImportOpen)}\n                                >\n                                    Valider\n                                </Button>\n                            </Modal.Actions>\n                        </Modal>\n                    </Menu.Item>\n                    <Menu.Item>\n                        <CSVLink data={getCsvData(data)} filename={\"planning.csv\"}>\n                            <Button color='brown'>Exportation Planning</Button>\n                        </CSVLink>\n                    </Menu.Item>\n                    <Menu.Item>\n                        <Button onClick={() => handleOpenConfirm(data, setData)} color='red'>Remise à zéro</Button>\n                        <Confirm\n                            open={data.confirmOpen}\n                            content='Es-tu sûr.e de vouloir remettre à zéro TOUTES les données de la page (permanences, règles, personnes...) ?'\n                            onCancel={() => handleCloseConfirm(data,  setData)}\n                            onConfirm={() => resetData(data, setData)}\n                        />\n                    </Menu.Item>\n                </Menu.Menu>\n            </Container>\n        </Menu>\n    )\n}\n\nexport default MenuContainer","import {Accordion, Container, Dimmer, Label, Loader, Message, Modal} from 'semantic-ui-react'\nimport _ from 'lodash'\nimport OnCallTimeContainer from './components/UI/OnCallTimeContainer'\nimport AvailabilitiesContainer from './components/UI/AvailabilitiesContainer'\nimport PlanningContainer from './components/UI/PlanningContainer'\nimport usePlanning from './components/hooks/usePlanning'\nimport RulesContainer from './components/UI/RulesContainer'\nimport MenuContainer from \"./components/UI/MenuContainer\";\n\nfunction App() {\n    const {\n        data,\n        setData\n    } = usePlanning()\n\n    const containers = [\n        {title: 'Permanences', content: <OnCallTimeContainer data={data} setData={setData} />},\n        {title: 'Règles', content: <RulesContainer data={data} setData={setData} />},\n        {title: 'Disponibilités', content: <AvailabilitiesContainer data={data} setData={setData} />},\n        {title: 'Planning', content: <PlanningContainer data={data} setData={setData} />},\n    ]\n\n    const panels = _.times(containers.length, (i) => ({\n        key: `panel-${i}`,\n        title: {\n            content: <Label basic color='black' size='massive' content={containers[i].title} />\n        },\n        content: {\n            content: containers[i].content\n        }\n    }))\n\n    return (\n        <>\n            <MenuContainer data={data} setData={setData}/>\n            <Container fluid style={{ paddingLeft: '3vw', paddingTop: '10vh', overflow: 'scroll', minHeight: '100vh' }}>\n\n                {\n                    data.loading &&\n                    (<Dimmer active page>\n                        <Loader size='massive'>Loading</Loader>\n                    </Dimmer>)\n                }\n                <Modal\n                    basic\n                    open={data.callback.error}\n                    onClose={() => {\n                        data.callback.error = false\n                        data.callback.message = { status: null, statusMsg: null }\n                        setData({...data})\n                    }}\n                >\n                    <Message negative>\n                        <Message.Header>\n                            {data.callback.message.status === 404 && 'Modèle introuvable'}\n                            {data.callback.message.status === 400 && 'Données invalides'}\n                            {data.callback.message.status === 409 && 'Erreur avec le solveur'}\n                            {data.callback.message.status === 500 && 'Erreur système'}\n                        </Message.Header>\n                        <Message.Content>\n                            {data.callback.message.status === 404 && 'Trop de contraintes liées aux règles ou manque de personnes'}\n                            {data.callback.message.status === 500 && 'Contactes le dev'}\n                        </Message.Content>\n                    </Message>\n                </Modal>\n                <Accordion\n                    panels={panels}\n                    exclusive={false}\n                    fluid\n                />\n            </Container>\n        </>\n\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}